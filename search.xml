<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二分法——静心之峰</title>
      <link href="2020/10/15/%E7%AE%97%E6%B3%95%EF%BC%9A%E4%BA%8C%E5%88%86%E6%B3%95/"/>
      <url>2020/10/15/%E7%AE%97%E6%B3%95%EF%BC%9A%E4%BA%8C%E5%88%86%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="二分法静心之峰"><a class="markdownIt-Anchor" href="#二分法静心之峰"></a> 二分法——静心之峰</h1><h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>日常生活中我们就在不断使用二分法，这种方法的效率非常高，我们可以看到</p><blockquote><p>log<sub>2</sub>(1024) = 10</p></blockquote><p>所以也就是说，以二分法几乎是遍历的1 / 100，还要更小。</p><p>这在大数据的面前更是出奇的有效。</p><p>所以我们肯定是要使用二分法。</p><p>但是二分法有一定局限性，最基本的一点就是二分法需要一个单调的数列才可以二分。</p><p>所以一般情况下我们要对数列排列后才可以去使用二分法，而排列的复杂度大约是 O(nlogn)。</p><p>这样就把二分法在 logn 领域几乎锁死了（我是指做题），只能把 n<sup>2</sup> 的算法优化为 nlogn。</p><p>不给例题了，没有太大的意义。</p><p>直接上模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板一</span></span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &lt; k) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板二</span></span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &gt; k) r = mid;</span><br><span class="line"><span class="keyword">else</span> l = mid + <span class="number">1</span>;C</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符动画代码</title>
      <link href="2020/10/14/%E5%AD%97%E7%AC%A6%E5%8A%A8%E7%94%BB%E4%BB%A3%E7%A0%81/"/>
      <url>2020/10/14/%E5%AD%97%E7%AC%A6%E5%8A%A8%E7%94%BB%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="bmpreadhpp"><a class="markdownIt-Anchor" href="#bmpreadhpp"></a> bmpread.hpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BMPREAD_HPP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BMPREAD_HPP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BMPFILEHEADERLENGTH 14  <span class="comment">// 位图文件头</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BMPINFOHEADERLENGTH 40  <span class="comment">// 位图信息头</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OFFSET 54   <span class="comment">// 偏移量（头部到数据部分）</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BM 19778    <span class="comment">// ASCII码</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBmpFile</span><span class="params">(FILE* fpbmp)</span></span>;            <span class="comment">// 判断是否为bmp文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getBmpWidthHeightStridePixChpix</span><span class="params">(FILE* fpbmp)</span></span>;    <span class="comment">// 获取文件宽高（像素）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getCharacter</span><span class="params">(FILE* fpbmp)</span></span>;     <span class="comment">// 转换为字符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recursur</span><span class="params">()</span></span>;   <span class="comment">//设置光标位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printChpix</span><span class="params">()</span></span>;    <span class="comment">//打印字符画</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveChpix</span><span class="params">(FILE* fpch)</span></span>;     <span class="comment">//保存字符画</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">showCh</span><span class="params">(FILE* fpbmp, FILE* fpch = <span class="literal">NULL</span>)</span></span>;    <span class="comment">//外部可调用</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">saveCh</span><span class="params">(FILE* fpbmp, FILE* fpch)</span></span>;   <span class="comment">//外部可调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩后 （每个字符高度是宽度两倍时）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getCharacterZIP</span><span class="params">(FILE* fpbmp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printChpixZIP</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveChpixZIP</span><span class="params">(FILE* fpch)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">showChZIP</span><span class="params">(FILE* fpbmp, FILE* fpch = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">saveChZIP</span><span class="params">(FILE* fpbmp, FILE* fpch)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="bmpreadcpp"><a class="markdownIt-Anchor" href="#bmpreadcpp"></a> bmpread.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bmpread.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> g_width, g_height, g_stride;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* g_linepix;</span><br><span class="line"><span class="keyword">char</span>* g_chpix;</span><br><span class="line"><span class="keyword">char</span>* g_chpixZIP;</span><br><span class="line"><span class="keyword">char</span> g_character[] = &#123;<span class="string">&quot;$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,\&quot;^` .&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">showCh</span><span class="params">(FILE* fpbmp, FILE* fpch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isBmpFile(fpbmp))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不是bmp文件&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getCharacter(fpbmp);</span><br><span class="line">    printChpix();</span><br><span class="line">    <span class="built_in">free</span>(g_linepix), <span class="built_in">free</span>(g_chpix), <span class="built_in">free</span>(g_chpixZIP);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">saveCh</span><span class="params">(FILE* fpbmp, FILE* fpch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    getCharacter(fpbmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fpch != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        saveChpix(fpch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(g_linepix), <span class="built_in">free</span>(g_chpix), <span class="built_in">free</span>(g_chpixZIP);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBmpFile</span><span class="params">(FILE* fpbmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> bfType = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    fseek(fpbmp, <span class="number">0L</span>, SEEK_SET);</span><br><span class="line">    fread(&amp;bfType, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">2</span>, fpbmp);</span><br><span class="line">    <span class="keyword">if</span> (BM != bfType)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getBmpWidthHeightStridePixChpix</span><span class="params">(FILE* fpbmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fseek(fpbmp, <span class="number">18L</span>, SEEK_SET);</span><br><span class="line">    fread(&amp;g_width, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">4</span>, fpbmp);</span><br><span class="line">    fseek(fpbmp, <span class="number">22L</span>, SEEK_SET);</span><br><span class="line">    fread(&amp;g_height, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">4</span>, fpbmp);</span><br><span class="line"></span><br><span class="line">    g_stride = (<span class="number">24</span> * g_width) / <span class="number">8</span>;</span><br><span class="line">    g_stride = (g_stride + <span class="number">3</span>) / <span class="number">4</span> * <span class="number">4</span>;</span><br><span class="line">    g_linepix = (<span class="keyword">unsigned</span> <span class="keyword">char</span>* )<span class="built_in">malloc</span>(g_stride);</span><br><span class="line">    g_chpix = (<span class="keyword">char</span>* )<span class="built_in">malloc</span>((g_width + <span class="number">1</span>) * g_height);</span><br><span class="line">    g_chpixZIP = (<span class="keyword">char</span>* )<span class="built_in">malloc</span>((g_width + <span class="number">1</span>) * g_height / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getCharacter</span><span class="params">(FILE* fpbmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fseek(fpbmp, OFFSET, SEEK_SET);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> gray = <span class="number">0</span>, len = <span class="built_in">strlen</span>(g_character) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = g_height - <span class="number">1</span>; r &gt;= <span class="number">0</span>; r -- )</span><br><span class="line">    &#123;</span><br><span class="line">        fread(g_linepix, <span class="number">1</span>, g_stride, fpbmp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; g_width; c ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            gray = (<span class="keyword">int</span>)(g_linepix[c * <span class="number">3</span> + <span class="number">2</span>] * <span class="number">0.3</span> + g_linepix[c * <span class="number">3</span> + <span class="number">1</span>] * <span class="number">0.59</span> + g_linepix[c * <span class="number">3</span>] * <span class="number">0.11</span>);</span><br><span class="line">            g_chpix[c + r * (g_width + <span class="number">1</span>)] = g_character[(<span class="keyword">int</span>)(gray / <span class="number">256.0</span> * len)];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        g_chpix[(r + <span class="number">1</span>) * (g_width + <span class="number">1</span>) - <span class="number">1</span>] = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g_chpix[g_height * (g_width + <span class="number">1</span>)] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recursur</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hout;</span><br><span class="line">    COORD coord;</span><br><span class="line">    coord.X = <span class="number">0</span>;</span><br><span class="line">    coord.Y = <span class="number">0</span>;</span><br><span class="line">    hout = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">    SetConsoleCursorPosition(hout,coord);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printChpix</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    recursur();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, g_chpix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveChpix</span><span class="params">(FILE* fpch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fseek(fpch, <span class="number">0L</span>, SEEK_SET);</span><br><span class="line">    <span class="built_in">fprintf</span>(fpch, <span class="string">&quot;%s&quot;</span>, g_chpix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getCharacterZIP</span><span class="params">(FILE* fpbmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fseek(fpbmp, OFFSET, SEEK_SET);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> gray = <span class="number">0</span>, len = <span class="built_in">strlen</span>(g_character) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = (g_height - <span class="number">1</span>) / <span class="number">2</span>; r &gt;= <span class="number">0</span>; r -- )</span><br><span class="line">    &#123;</span><br><span class="line">        fread(g_linepix, <span class="number">1</span>, g_stride, fpbmp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; g_width; c ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            gray = (<span class="keyword">int</span>)(g_linepix[c * <span class="number">3</span> + <span class="number">2</span>] * <span class="number">0.3</span> + g_linepix[c * <span class="number">3</span> + <span class="number">1</span>] * <span class="number">0.59</span> + g_linepix[c * <span class="number">3</span>] * <span class="number">0.11</span>);</span><br><span class="line">            g_chpixZIP[c + r * (g_width + <span class="number">1</span>)] = g_character[(<span class="keyword">int</span>)(gray / <span class="number">256.0</span> * len)];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        g_chpixZIP[(r + <span class="number">1</span>) * (g_width + <span class="number">1</span>) - <span class="number">1</span>] = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!feof(fpbmp)) fread(g_linepix, <span class="number">1</span>, g_stride, fpbmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g_chpixZIP[((g_height - <span class="number">1</span>) / <span class="number">2</span> + <span class="number">1</span>) * (g_width + <span class="number">1</span>)] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveChpixZIP</span><span class="params">(FILE* fpch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fseek(fpch, <span class="number">0L</span>, SEEK_SET);</span><br><span class="line">    <span class="built_in">fprintf</span>(fpch, <span class="string">&quot;%s&quot;</span>, g_chpixZIP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printChpixZIP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    recursur();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, g_chpixZIP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">showChZIP</span><span class="params">(FILE* fpbmp, FILE* fpch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isBmpFile(fpbmp))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不是bmp文件&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getCharacterZIP(fpbmp);</span><br><span class="line">    printChpixZIP();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fpch != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        saveChpixZIP(fpch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">saveChZIP</span><span class="params">(FILE* fpbmp, FILE* fpch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    getCharacterZIP(fpbmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fpch != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        saveChpixZIP(fpch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(g_linepix), <span class="built_in">free</span>(g_chpix), <span class="built_in">free</span>(g_chpixZIP);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="maincpp"><a class="markdownIt-Anchor" href="#maincpp"></a> main.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bmpread.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">badappletxt</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">badappleT</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">badappleC</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onePic</span><span class="params">(<span class="keyword">char</span> *inpath, <span class="keyword">char</span> *outpath)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>* g_linepix;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>* g_chpix;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>* g_chpixZIP;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">&quot;chcp 437&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;mode con cols=220 lines=150&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;color F0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    PlaySound(&quot;BadApple.wav&quot;, NULL, SND_FILENAME | SND_ASYNC);</span></span><br><span class="line"><span class="comment">//    badappleC();</span></span><br><span class="line"><span class="comment">//    onePic(&quot;picture/2.bmp&quot;, &quot;picture/2.txt&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">badappletxt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE* fpin = fopen(<span class="string">&quot;baddapple12/badapple0000.bmp&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    getBmpWidthHeightStridePixChpix(fpin);</span><br><span class="line">    fclose(fpin);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2628</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> path[<span class="number">30</span>] = <span class="string">&quot;\0&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sprintf</span>(path, <span class="string">&quot;%s%04d%s&quot;</span>, <span class="string">&quot;baddapple12/badapple&quot;</span>, i, <span class="string">&quot;.bmp&quot;</span>);</span><br><span class="line">        FILE* fpin = fopen(path, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(path, <span class="string">&quot;%s%04d%s&quot;</span>, <span class="string">&quot;txt/badapple&quot;</span>, i, <span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">        FILE* fpout = fopen(path, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        saveChZIP(fpin, fpout);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;has done:%d\n&quot;</span>, i);</span><br><span class="line"></span><br><span class="line">        fclose(fpin);</span><br><span class="line">        fclose(fpout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(g_linepix), <span class="built_in">free</span>(g_chpix), <span class="built_in">free</span>(g_chpixZIP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">badappleT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    badappletxt();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">33000</span>] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">char</span> *p = buf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> cd = <span class="number">1000</span> / <span class="number">60.0</span>;        <span class="comment">//每秒60帧</span></span><br><span class="line">    <span class="keyword">clock_t</span> beginClock = clock();</span><br><span class="line">    <span class="keyword">double</span> totalCd = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5215</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> path[<span class="number">30</span>] = <span class="string">&quot;\0&quot;</span>;</span><br><span class="line">        <span class="built_in">sprintf</span>(path, <span class="string">&quot;%s%04d%s&quot;</span>, <span class="string">&quot;txt/badapple&quot;</span>, i, <span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">        FILE* fpout = fopen(path, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        p = buf;</span><br><span class="line">        recursur();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!feof(fpout))</span><br><span class="line">        &#123;</span><br><span class="line">            *p = fgetc(fpout);</span><br><span class="line">            p ++ ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (clock() &gt;= beginClock + cd)</span><br><span class="line">            &#123;</span><br><span class="line">                totalCd += cd;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Frame:%d&quot;</span>, i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fclose(fpout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">badappleC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE* fpin = fopen(<span class="string">&quot;baddapple12/badapple0000.bmp&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    getBmpWidthHeightStridePixChpix(fpin);</span><br><span class="line">    fclose(fpin);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2628</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> path[<span class="number">30</span>] = <span class="string">&quot;\0&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sprintf</span>(path, <span class="string">&quot;%s%04d%s&quot;</span>, <span class="string">&quot;baddapple12/badapple&quot;</span>, i, <span class="string">&quot;.bmp&quot;</span>);</span><br><span class="line">        FILE* fpin = fopen(path, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(path, <span class="string">&quot;%s%04d%s&quot;</span>, <span class="string">&quot;txt/badapple&quot;</span>, i, <span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">        FILE* fpout = fopen(path, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;the current frame is : %d&quot;</span>, i);</span><br><span class="line">        showChZIP(fpin);</span><br><span class="line"></span><br><span class="line">        fclose(fpin);</span><br><span class="line">        fclose(fpout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(g_linepix), <span class="built_in">free</span>(g_chpix), <span class="built_in">free</span>(g_chpixZIP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onePic</span><span class="params">(<span class="keyword">char</span> *inpath, <span class="keyword">char</span> *outpath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE* fpin = fopen(inpath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    FILE* fpout = fopen(outpath, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line"></span><br><span class="line">    getBmpWidthHeightStridePixChpix(fpin);</span><br><span class="line">    saveChZIP(fpin, fpout);</span><br><span class="line"></span><br><span class="line">    fclose(fpin);</span><br><span class="line">    fclose(fpout);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(g_linepix), <span class="built_in">free</span>(g_chpix), <span class="built_in">free</span>(g_chpixZIP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小故事（2）</title>
      <link href="2020/10/14/%E5%B0%8F%E6%95%85%E4%BA%8B%EF%BC%882%EF%BC%89/"/>
      <url>2020/10/14/%E5%B0%8F%E6%95%85%E4%BA%8B%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>昨天我看到群里一个高等数学考试用泰勒展开做极限题目的二货了</p><p>我问他：“你没有什么理想吗？你现在最渴望的事情是什么？”</p><p>二货立马回复我：“刷掉所有数分题。”</p><p>真没想到高数都算不对的人还有这样的决心。</p><p>我问为什么这能成为现阶段最渴望的事情，他反问“你难道就没有遇到过考试出不能洛的极限，全场都不会，你却会的情况吗？”</p><p>好有道理我竟无法反驳。</p><p>这么能说会道的大学生，一定是一个不可多得的天才。</p><p>于是，我决定：屏蔽他。</p><p>这两年在各种高数群里潜水多了,看着各路大佬没日没夜的讨论,原本爱水群的我,也只能每次默默+1,然后被禁言。</p><p>无论是校内群,还是校外群,群里的大佬总是那么几个,久而久之,我发现一个大佬们残酷的共同点——</p><p>他们都不学高数。</p><p>不努力吗？一个个都是绩点4.9起步，随手就是几百上千题秒解。</p><p>没时间吗? 一个个群消息都是秒回</p><p>我问过其中一个大佬,问:你不想学习吗?</p><p>他说：废话，肯定想啊。</p><p>我问：为什么不学？没时间吗？</p><p>他叹气：不，没有必要。</p><p>他意味深长道：<strong>优秀的大学生都是不学高数的</strong>。</p><p>跟我聊天的这个大佬，本身就是北大青鸟的扛把子，竞赛金牌随手拿，培训班随手进，各个教育平台都是首席讲师，高数之余 , 还能去做物理竞赛 。</p><p>他先前谎报年龄，自费去参加CPhO比赛 , 并没有花父母的钱 , 靠着帮人当枪手几万块的工钱 , 刚刚够得上生活。</p><p>最开始半年 , 每月只能剩个个把块钱 , 身边的女朋友们也都跑光了 , 死咬着牙不跟家里人说 ，他拿辛苦比赛得的钱斗地主, 终于在几天后，转亏为盈 , 过上了现在无忧无虑的生活 .</p><p>他还从来没有放弃过追回他的女朋友们。</p><p>这样优秀的物竞大佬，恐怕时间都很宝贵，哪还用得着学高数呢 。</p><p>我还认识一个英语爷</p><p>只要百度单词就能搜到他的博客 , 博客里充满了一堆你见都没见过的词 , 一堆他觉得常见你却一辈子也用不上的语法。</p><p>English这个圈子，大多数人都只能苦苦挣扎 , 不为人知，能达到他这个程度的，基本上只要在群里发言 , 就能得到一堆求网盘链接，自带全体复读机功能。</p><p>然而这位英语爷却是一股清流</p><p>他最大的爱好就是和上文提到的那位北大青鸟的大佬在群里打情骂俏 , 业余时间还会教教我们这些菜鸡一些简单语法。</p><p>我问他：“你到底怎么保持一颗平常心的，考四六级这么简单的卷子，怎么能接着活得如此潇洒自在，不会干扰到你的内心？”</p><p>他笑，说：你小时候没写过作文啊？尤其是学校组织的那种征文？</p><p>我立刻懂了。</p><p><strong>即便是简单的东西，也可以用专业态度去应对，在讲解简单语法的同时，也能够提高自己。</strong></p><p>就好比小时候写那种歌颂体作文时，我们都有几套模版去对付，获得应试的分数保证自己不被家长、老师训斥后，依旧会在自己的笔记本写真正想写的小说。</p><p><strong>这种本真，不是每个人都能坚持的，尤其是在成为大佬后，是非常难得的。</strong></p><p>他在教授完那些简单语法后 , 仍然会关注一下自己经济学人最新一章的链接跑到哪了。</p><p>像他这样仿佛活成仙的男人 ,他知道他会用英语解决高数题，所以，他不着急。</p><p>我希望你明白，<strong>大学生的价值从来都是由自己体现，而非他学不学高数</strong>。</p><p>上周遇到高数老师，他说他认识的一些事业单位的男孩子，总会认为高数很重要，不学绩点上不去。</p><p>他跟我说“可当那位青鸟学子献上他的高数试卷，我哭了，洁白如初见，好似神迹，我给了他满分。”</p><p>人是不需要高数的。</p><p>我爱的高数，在与我相处时，我当然会宠着他哄着他，求他别让我挂科。</p><p>但是，<strong>若一个真想成为自己理想中的样子，仍是要不屈服于这个高数至死的庸俗时代，仍是要不妥协于这个高数横流的主流社会。</strong></p><p><strong>仍是要永远年轻，永远热泪盈眶。</strong></p><p><strong>仍是要时时刻刻对美好满怀期待，对未来充满渴望，对经典心怀敬畏。</strong></p><p>要记住啊，<strong>知世故而不世故，处江湖而远江湖，才是最善良的成熟。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 小故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小故事（1）</title>
      <link href="2020/10/14/%E5%B0%8F%E6%95%85%E4%BA%8B%EF%BC%881%EF%BC%89/"/>
      <url>2020/10/14/%E5%B0%8F%E6%95%85%E4%BA%8B%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一"><a class="markdownIt-Anchor" href="#一"></a> 一</h1><p>巫师的帐篷里</p><p>“所以你想知道些什么呢？我敬爱的顾客。”</p><p>“请告诉我，为什么这么多年过后他的灵魂为什么还是缠着我，为什么只有我看的见他，为什么他现在就坐在我的身旁！。”</p><p>···</p><p>“哼，我知道。这是一点心意，当年国王会见我的时候，赏赐了我无数的金银，到今天我还有的是，只要你有这个能耐。”</p><p>“哈哈，您误会了，我只是对您感到好奇，因为肩上的伤口还在滴血。”</p><p>“什么伤口，流血？我的盔甲经历了三次战争，我的宝剑曾经斩首过西部的恶狼，你知道的，当年可没少死人。”</p><p>“······，那我给您讲个故事。”</p><p>——从前有一只猴子，他有一个巨大的家族。而他生活的环境也是其他猴子不敢想象的，成片的森林，清澈的湖水，数不胜数的奇珍异果···他无忧无虑，活得很自在。突然有一天，族群分裂，正值壮年的他要和一位素不相识的猴子争夺领头的位置。打斗没有悬念，另一只猴子被他揍的哇哇大叫，可是突然间对方掏出了暗针，这打破了这场争夺战的规定——不许使用武器，由于事出突然，来不及反应，他的左腿被划伤了。大家叫骂着赶走了作弊者，一拥而上，关心他的伤势。</p><p>从此，另一只猴子被这个家族驱逐了出去，杳无音讯。而获胜的他以伤口为一种殊荣，因为这是第一次又猴子在争夺地位的战斗中负伤。开始的时候大家都来围观，赞许他，于是为了满足大家的好奇，他每到白天就装出一瘸一拐的样子，在最繁忙的树枝头逛街；晚上，待到月亮爬到正空，他小心的撕开一点自己的伤口，防止它愈合。</p><p>很快就没人对一个小小的伤口感兴趣了，日复一日的工作又压弯了猴子们的头。而那个获胜者开始逐渐沦为时间的废弃物，新一轮的竞选早就开始，他作为伤员没有资格参战，但是仍然被尊为评委，坐在观众席的首席。大家呐喊，尖叫，却没有人注意到那个最高的座椅被染成了血红色。很快新的领袖诞生了，这只猴子彻底被人抛在记忆的灰尘里。</p><p>······</p><p>“所以这只猴子最后死了是吗？”</p><p>···</p><p>“所以这和我又有什么关系？我找你来是听说你还有些法力，不是···”</p><p>···</p><p>骑士站了起来，又坐了下去。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 小故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora基本用法</title>
      <link href="2020/10/14/Typora%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>2020/10/14/Typora%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="typora基本用法总结"><a class="markdownIt-Anchor" href="#typora基本用法总结"></a> Typora基本用法总结</h1><p><mark>（1）标题</mark></p><h1 id="一级标题"><a class="markdownIt-Anchor" href="#一级标题"></a> 一级标题</h1><h2 id="二级标题"><a class="markdownIt-Anchor" href="#二级标题"></a> 二级标题</h2><h3 id="三级标题"><a class="markdownIt-Anchor" href="#三级标题"></a> 三级标题</h3><h4 id="四级标题"><a class="markdownIt-Anchor" href="#四级标题"></a> 四级标题</h4><h5 id="五级标题"><a class="markdownIt-Anchor" href="#五级标题"></a> 五级标题</h5><h6 id="六级标题"><a class="markdownIt-Anchor" href="#六级标题"></a> 六级标题</h6><p><mark>（2）字体</mark></p><p><strong>加粗</strong></p><p><em>倾斜</em></p><p><em><strong>倾斜加粗</strong></em></p><p><s>删除线</s></p><p><mark>高亮</mark></p><p>我是<sup>上标</sup></p><p>我是<sub>下标</sub></p><p><mark>（3）列表</mark></p><ul><li>一二三四五</li><li>（按一下回车自动添加，再按一下取消）<ul><li>上山打老虎（按一下tab）<ul><li>老虎没打到<ul><li>打到小松鼠</li></ul></li></ul></li></ul></li></ul><ol><li>一二三四五</li><li>上山打老虎</li><li>老虎没打到</li><li>打到小松鼠</li></ol><p><mark>（4）表格</mark></p><table><thead><tr><th>MON</th><th>TUE</th><th>WED</th><th>THU</th><th>FRI</th></tr></thead><tbody><tr><td>上山（换行请按shift+enter）</td><td></td><td></td><td></td><td></td></tr><tr><td>打老虎（选择行列请通过表格左上角自动修改）</td><td></td><td></td><td></td><td></td></tr></tbody></table><p><mark>（5）引用</mark></p><blockquote><p>一二三四五</p><p>(直接回车)</p><blockquote><p>上山打老虎（再输入&gt;)</p><blockquote><p>老虎不在家</p><blockquote><p>打到小松鼠</p></blockquote></blockquote></blockquote></blockquote><p><mark>（6）分割线</mark></p><hr /><p>（三个“-”就够了）</p><p><mark>（7）代码</mark></p><p><code>行内代码</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码块</span><br></pre></td></tr></table></figure><p><mark>(8)Latex语法</mark></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><mark>(9)插入图片</mark></p><p><img src="http://code.insorker.cn/wp-content/uploads/2020/10/20200328115431_3yGjT.jpeg.jpg" alt="" /></p><p>（右键更快）</p><p><mark>（10）插入链接</mark></p><p><a href="code.insorker.cn">我的博客</a></p><p>（右键更快）</p><hr /><p>更多用法请于  “文件”——“偏好设置“  中修改</p><p>主题修改可以通过修改外观中的 .css 文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFS——献给阿尔吉侬的花束</title>
      <link href="2020/10/14/%E7%AE%97%E6%B3%95%EF%BC%9ABFS/"/>
      <url>2020/10/14/%E7%AE%97%E6%B3%95%EF%BC%9ABFS/</url>
      
        <content type="html"><![CDATA[<h1 id="bfs献给阿尔吉侬的花束"><a class="markdownIt-Anchor" href="#bfs献给阿尔吉侬的花束"></a> BFS——献给阿尔吉侬的花束</h1><p>BFS 的思路很清晰，先遍历距离为 1 的点，然后是 2 ，然后是 3 。。。</p><p>如此下来，就是天边也能遍历到（嗯，嗯）；</p><p>再谈思想，可以用队列的思想，我的队首出列，并一定操作，再把队首连接的下一级节点压入队中，流畅，自然。</p><p>队列的方法可以用 STL库</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q[n];</span><br><span class="line">q.push(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(q.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; t = q.front();</span><br><span class="line">q.pop();</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">q.push(); <span class="comment">// or not</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以手写一个队列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p[N];</span><br><span class="line">p[tt ++ ] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (hh &lt;= tt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; t = p[hh ++ ];</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">q[ ++ tt] = ...;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是很明晰呢？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划——埋葬故国武士的灵魂</title>
      <link href="2020/10/13/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>2020/10/13/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划埋葬故国武士的灵魂"><a class="markdownIt-Anchor" href="#动态规划埋葬故国武士的灵魂"></a> 动态规划——埋葬故国武士的灵魂</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>这是百度百科给出的动态规划的基本概念：</p><blockquote><p>如果一类活动过程可以分为若干个互相联系的阶段，在每一个阶段都需作出决策（采取措施），一个阶段的决策确定以后，常常影响到下一个阶段的决策，从而就完全确定了一个过程的活动路线，则称它为多阶段决策问题。</p><p>各个阶段的决策构成一个决策序列，称为一个策略。每一个阶段都有若干个决策可供选择，因而就有许多策略供我们选取，对应于一个策略可以确定活动的效果，这个效果可以用数量来确定。策略不同，效果也不同，多阶段决策问题，就是要在可以选择的那些策略中间，选取一个最优策略，使在预定的标准下达到最好的效果。</p></blockquote><p>我看过一个非常生动的解释</p><blockquote><p>Insorker：如何向一个四岁小孩解释动态规划？</p><p>Carve：”1 + 1 + 1 + 1 + 1 + 1 + 1 + 1“等于几？</p><p>。。。（3秒后）</p><p>Insorker：8！</p><p>Carve：如果再加上1呢</p><p>Insorker：9！</p><p>Carve：你是如何算这么快的呢？</p><p>Insorker：前面的1已经算过了。</p><p>Carve：O(∩_∩)O</p><p>Insorker：我明白了，我是记住了之前的答案，而不是再算一遍，也就是说我用我的大脑记忆代替了计算的时间花费。</p></blockquote><p>那么我个人对动态规划的理解是：</p><p>通过把大问题拆分成一堆递进的小问题，依次求每个小问题的解，最后获得整体上的解。</p><p>或者换句话说，</p><blockquote><p>一个这样的迷宫，每走过一个格子加上格子上的数，只能向下或者向右前进，初始是0：</p><p>S 2 3 2</p><p>2 1 4 1</p><p>1 1 2 1</p><p>2 3 1 E</p><p>如何才能最终以最大的和，从 S 走到 E ？</p></blockquote><p>一种方法是我把所有路径都算一遍，就是2 + 3 + 2 + 1 + 1这种走法算一遍，2 + 3 + 4 + 2 + 1也算一遍，这样要算 20 遍数据。但是我们可以很清楚的看见2 + 3这个部分被算了两次，这显然是在浪费时间。虽然每次计算我们开出来的数组很小，但是时间复杂度是20，如果这个迷宫是10 * 10的迷宫，则复杂度上升到了252，如果是 n * n 呢？则时间复杂度会是（约为）<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow><mrow><mo stretchy="false">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo stretchy="false">!</mo><mo stretchy="false">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{n!}{(\frac{n}{2})!(\frac{n}{2})!}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4659079999999998em;vertical-align:-0.5857999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mclose mtight">)</span><span class="mclose mtight">!</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mclose mtight">)</span><span class="mclose mtight">!</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mclose mtight">!</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5857999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>（杨辉三角）。。。</p><p>所以我们肯定需要某种方法来减少时间上的复杂度，不用说肯定是利用空间啦(〝▼皿▼)</p><p>我们可以写出一个dp数组，保存我们走过的路的最优解，所以每个小问题就是：走到（x，y）的最优解是什么。同时我们也可以列出递推式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[x][y] = max(dp[x - <span class="number">1</span>][y], dp[x][y - <span class="number">1</span>]) + v;</span><br></pre></td></tr></table></figure><h2 id="背包问题"><a class="markdownIt-Anchor" href="#背包问题"></a> 背包问题</h2><h3 id="01背包问题"><a class="markdownIt-Anchor" href="#01背包问题"></a> 01背包问题</h3><blockquote><p><strong>题目</strong></p><p>有<strong>N</strong>件物品和一个容量是<strong>V</strong>的背包。</p><p>每件物品只能使用一次。</p><p>第<strong>i</strong>件物品体积是<strong>v<sub>i</sub></strong>，价值是<strong>w<sub>i</sub></strong>。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包的容量，且总价值最大。</p><p><strong>输出格式</strong></p><p>输出一个整数，表示最大价值。</p><p><strong>数据范围</strong></p><p>0 &lt; <em>N</em>, <em>V</em> ≤ 1000<br />0 &lt; <em>v<sub>i</sub></em>,  <em>w<sub>i</sub></em> ≤ 1000</p><p><strong>输入样例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;4 5</span><br><span class="line">1 2</span><br><span class="line">&gt;2 4</span><br><span class="line">3 4</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;8</span><br></pre></td></tr></table></figure></blockquote><p>二维数组的情况很好理解，我们用<code>dp[i][j]</code>来表示取到第<strong>i</strong>个物品时，总容量为<strong>j</strong>的最优解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> w, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;w, &amp;v);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt; <span class="number">0</span>; j -- )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; w)</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - w] + v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, dp[n][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是一维数组就非常令人费解。</p><p>首先为什么要变一维数组，很显然是为了省空间，那可以省空间吗？</p><p>答案是肯定的。我们可以发现<code>dp[1][j]</code>在循环一次后就再也没有用到，这是为什么呢？</p><p>这是从定义出发导致的失误，每次我们算出来的结果，都是前<strong>i</strong>个物品在总量为<strong>j</strong>的情况下的最优解，但是我们并不需要记录这个最优解，所以可以优化为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> w, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; w &gt;&gt; v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j; j -- )</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w)</span><br><span class="line">                dp[j] = max(dp[j], dp[j - w] + v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>锵锵，是不是很神奇呢~~</p><p>原理很简单，我们只是把<strong>i</strong>省掉了，意思是放弃了记录所有前<strong>i</strong>个物品的最优解，转而只保存第<strong>i</strong>个物品的最优解。换句话说，就是现在记录的<code>dp[j]</code>其实就是<code>dp[i][j]</code>，只是其他的**“i”**我们不管了 哼，哼(▼へ▼メ)。</p><h2 id="未完待续"><a class="markdownIt-Anchor" href="#未完待续"></a> 未完待续</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心——古神的盛宴</title>
      <link href="2020/10/11/%E7%AE%97%E6%B3%95%EF%BC%9A%E8%B4%AA%E5%BF%83/"/>
      <url>2020/10/11/%E7%AE%97%E6%B3%95%EF%BC%9A%E8%B4%AA%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="贪心古神的盛宴"><a class="markdownIt-Anchor" href="#贪心古神的盛宴"></a> 贪心——古神的盛宴</h1><h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>这是我觉得最有意思的算法。</p><p>题目很多变，而且对数学有一定要求。</p><p>如果我做一个贪心的人怎么样呢，不断地追求眼前的最优解，不断追求既得的利益，一定会成为一个大富翁吧。</p><p>现实是否定的，因为我们要考虑到未来的因素。</p><p>能否从纷繁复杂的可能中找到一个有用的解，需要去理性的证明，而不是感性的冲动。</p><p>有机会遇到好的题目我会放到博客里的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在最前面</title>
      <link href="2020/10/11/%E5%86%99%E5%9C%A8%E6%9C%80%E5%89%8D%E9%9D%A2/"/>
      <url>2020/10/11/%E5%86%99%E5%9C%A8%E6%9C%80%E5%89%8D%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="一二三四五六七"><a class="markdownIt-Anchor" href="#一二三四五六七"></a> 一二三四五六七</h1><p>本来已经有一个博客了，但是那边建站用的是WordPress，个人感觉有点过于庸华。</p><p>本着简约至上的理念，再加上最近才知道github可以托管静态页面，就用Hexo建了一个小网站。</p><p>当然，Hexo支持markdown语法，这也让我有种很温馨的感觉。</p><p>就好像森林里的小木屋，大冬天点上一炉篝火，盯着火苗发呆。</p><p>所以大概或许说不定以后会经常在这里更新，写写题解，做做笔记，说说话。</p><p>但是以后还是会从这里搬走······</p><p>搬到哪里去呢······</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>slides</title>
      <link href="slides/index.html"/>
      <url>slides/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类(^_−)☆</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>404</title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签o(´^｀)o</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
