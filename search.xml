<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小故事（1）</title>
      <link href="2020/10/14/%E5%B0%8F%E6%95%85%E4%BA%8B%EF%BC%881%EF%BC%89/"/>
      <url>2020/10/14/%E5%B0%8F%E6%95%85%E4%BA%8B%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p>巫师的帐篷里</p><p>“所以你想知道些什么呢？我敬爱的顾客。”</p><p>“请告诉我，为什么这么多年过后他的灵魂为什么还是缠着我，为什么只有我看的见他，为什么他现在就坐在我的身旁！。”</p><p>···</p><p>“哼，我知道。这是一点心意，当年国王会见我的时候，赏赐了我无数的金银，到今天我还有的是，只要你有这个能耐。”</p><p>“哈哈，您误会了，我只是对您感到好奇，因为肩上的伤口还在滴血。”</p><p>“什么伤口，流血？我的盔甲经历了三次战争，我的宝剑曾经斩首过西部的恶狼，你知道的，当年可没少死人。”</p><p>“······，那我给您讲个故事。”</p><p>——从前有一只猴子，他有一个巨大的家族。而他生活的环境也是其他猴子不敢想象的，成片的森林，清澈的湖水，数不胜数的奇珍异果···他无忧无虑，活得很自在。突然有一天，族群分裂，正值壮年的他要和一位素不相识的猴子争夺领头的位置。打斗没有悬念，另一只猴子被他揍的哇哇大叫，可是突然间对方掏出了暗针，这打破了这场争夺战的规定——不许使用武器，由于事出突然，来不及反应，他的左腿被划伤了。大家叫骂着赶走了作弊者，一拥而上，关心他的伤势。</p><p>从此，另一只猴子被这个家族驱逐了出去，杳无音讯。而获胜的他以伤口为一种殊荣，因为这是第一次又猴子在争夺地位的战斗中负伤。开始的时候大家都来围观，赞许他，于是为了满足大家的好奇，他每到白天就装出一瘸一拐的样子，在最繁忙的树枝头逛街；晚上，待到月亮爬到正空，他小心的撕开一点自己的伤口，防止它愈合。</p><p>很快就没人对一个小小的伤口感兴趣了，日复一日的工作又压弯了猴子们的头。而那个获胜者开始逐渐沦为时间的废弃物，新一轮的竞选早就开始，他作为伤员没有资格参战，但是仍然被尊为评委，坐在观众席的首席。大家呐喊，尖叫，却没有人注意到那个最高的座椅被染成了血红色。很快新的领袖诞生了，这只猴子彻底被人抛在记忆的灰尘里。</p><p>······</p><p>“所以这只猴子最后死了是吗？”</p><p>···</p><p>“所以这和我又有什么关系？我找你来是听说你还有些法力，不是···”</p><p>···</p><p>骑士站了起来，又坐了下去。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora基本用法</title>
      <link href="2020/10/14/Typora%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>2020/10/14/Typora%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora基本用法总结"><a href="#Typora基本用法总结" class="headerlink" title="Typora基本用法总结"></a>Typora基本用法总结</h1><p>==（1）标题==</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>==（2）字体==</p><p><strong>加粗</strong></p><p><em>倾斜</em></p><p><strong><em>倾斜加粗</em></strong></p><p><del>删除线</del></p><p>==高亮==</p><p>我是^上标^</p><p>我是<del>下标</del></p><p>==（3）列表==</p><ul><li>一二三四五</li><li>（按一下回车自动添加，再按一下取消）<ul><li>上山打老虎（按一下tab）<ul><li>老虎没打到<ul><li>打到小松鼠</li></ul></li></ul></li></ul></li></ul><ol><li>一二三四五</li><li>上山打老虎</li><li>老虎没打到</li><li>打到小松鼠</li></ol><p>==（4）表格==</p><table><thead><tr><th>MON</th><th>TUE</th><th>WED</th><th>THU</th><th>FRI</th></tr></thead><tbody><tr><td>上山（换行请按shift+enter）</td><td></td><td></td><td></td><td></td></tr><tr><td>打老虎（选择行列请通过表格左上角自动修改）</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>==（5）引用==</p><blockquote><p>一二三四五</p><p>(直接回车)</p><blockquote><p>上山打老虎（再输入&gt;)</p><blockquote><p>老虎不在家</p><blockquote><p>打到小松鼠</p></blockquote></blockquote></blockquote></blockquote><p>==（6）分割线==</p><hr><p>（三个“-”就够了）</p><p>==（7）代码==</p><p><code>行内代码</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码块</span><br></pre></td></tr></table></figure><p>==(8)Latex语法==</p><p>$\frac{1}{2}$</p><p>==(9)插入图片==</p><p><img src="http://code.insorker.cn/wp-content/uploads/2020/10/20200328115431_3yGjT.jpeg.jpg"></p><p>（右键更快）</p><p>==（10）插入链接==</p><p><a href="code.insorker.cn">我的博客</a></p><p>（右键更快）</p><hr><p>更多用法请于  “文件”——“偏好设置“  中修改</p><p>主题修改可以通过修改外观中的 .css 文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法：BFS</title>
      <link href="2020/10/14/%E7%AE%97%E6%B3%95%EF%BC%9ABFS/"/>
      <url>2020/10/14/%E7%AE%97%E6%B3%95%EF%BC%9ABFS/</url>
      
        <content type="html"><![CDATA[<h1 id="BFS——献给阿尔吉侬的花束"><a href="#BFS——献给阿尔吉侬的花束" class="headerlink" title="BFS——献给阿尔吉侬的花束"></a>BFS——献给阿尔吉侬的花束</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划——埋葬故国武士的灵魂</title>
      <link href="2020/10/13/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>2020/10/13/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划——埋葬故国武士的灵魂"><a href="#动态规划——埋葬故国武士的灵魂" class="headerlink" title="动态规划——埋葬故国武士的灵魂"></a>动态规划——埋葬故国武士的灵魂</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这是百度百科给出的动态规划的基本概念：</p><blockquote><p>如果一类活动过程可以分为若干个互相联系的阶段，在每一个阶段都需作出决策（采取措施），一个阶段的决策确定以后，常常影响到下一个阶段的决策，从而就完全确定了一个过程的活动路线，则称它为多阶段决策问题。</p><p>各个阶段的决策构成一个决策序列，称为一个策略。每一个阶段都有若干个决策可供选择，因而就有许多策略供我们选取，对应于一个策略可以确定活动的效果，这个效果可以用数量来确定。策略不同，效果也不同，多阶段决策问题，就是要在可以选择的那些策略中间，选取一个最优策略，使在预定的标准下达到最好的效果。</p></blockquote><p>我看过一个非常生动的解释</p><blockquote><p>Insorker：如何向一个四岁小孩解释动态规划？</p><p>Carve：”1 + 1 + 1 + 1 + 1 + 1 + 1 + 1“等于几？</p><p>。。。（3秒后）</p><p>Insorker：8！</p><p>Carve：如果再加上1呢</p><p>Insorker：9！</p><p>Carve：你是如何算这么快的呢？</p><p>Insorker：前面的1已经算过了。</p><p>Carve：O(∩_∩)O</p><p>Insorker：我明白了，我是记住了之前的答案，而不是再算一遍，也就是说我用我的大脑记忆代替了计算的时间花费。</p></blockquote><p>那么我个人对动态规划的理解是：</p><p>通过把大问题拆分成一堆递进的小问题，依次求每个小问题的解，最后获得整体上的解。</p><p>或者换句话说，</p><blockquote><p>一个这样的迷宫，每走过一个格子加上格子上的数，只能向下或者向右前进，初始是0：</p><p>S 2 3 2</p><p>2 1 4 1</p><p>1 1 2 1</p><p>2 3 1 E</p><p>如何才能最终以最大的和，从 S 走到 E ？</p></blockquote><p>一种方法是我把所有路径都算一遍，就是2 + 3 + 2 + 1 + 1这种走法算一遍，2 + 3 + 4 + 2 + 1也算一遍，这样要算 20 遍数据。但是我们可以很清楚的看见2 + 3这个部分被算了两次，这显然是在浪费时间。虽然每次计算我们开出来的数组很小，但是时间复杂度是20，如果这个迷宫是10 * 10的迷宫，则复杂度上升到了252，如果是 n * n 呢？则时间复杂度会是（约为）$\frac{n!}{(\frac{n}{2})!(\frac{n}{2})!}$（杨辉三角）。。。</p><p>所以我们肯定需要某种方法来减少时间上的复杂度，不用说肯定是利用空间啦(〝▼皿▼)</p><p>我们可以写出一个dp数组，保存我们走过的路的最优解，所以每个小问题就是：走到（x，y）的最优解是什么。同时我们也可以列出递推式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[x][y] = max(dp[x - <span class="number">1</span>][y], dp[x][y - <span class="number">1</span>]) + v;</span><br></pre></td></tr></table></figure><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><h3 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h3><blockquote><p><strong>题目</strong></p><p>有<strong>N</strong>件物品和一个容量是<strong>V</strong>的背包。</p><p>每件物品只能使用一次。</p><p>第<strong>i</strong>件物品体积是<strong>v<del>i</del>**，价值是</strong>w<del>i</del>**。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包的容量，且总价值最大。</p><p><strong>输出格式</strong></p><p>输出一个整数，表示最大价值。</p><p><strong>数据范围</strong></p><p>0 &lt; <em>N</em>, <em>V</em> ≤ 1000<br>0 &lt; <em>v<del>i</del></em>,  <em>w<del>i</del></em> ≤ 1000</p><p><strong>输入样例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;4 5</span><br><span class="line">1 2</span><br><span class="line">&gt;2 4</span><br><span class="line">3 4</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;8</span><br></pre></td></tr></table></figure></blockquote><p>二维数组的情况很好理解，我们用<code>dp[i][j]</code>来表示取到第<strong>i</strong>个物品时，总容量为<strong>j</strong>的最优解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> w, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;w, &amp;v);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt; <span class="number">0</span>; j -- )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; w)</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - w] + v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, dp[n][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是一维数组就非常令人费解。</p><p>首先为什么要变一维数组，很显然是为了省空间，那可以省空间吗？</p><p>答案是肯定的。我们可以发现<code>dp[1][j]</code>在循环一次后就再也没有用到，这是为什么呢？</p><p>这是从定义出发导致的失误，每次我们算出来的结果，都是前<strong>i</strong>个物品在总量为<strong>j</strong>的情况下的最优解，但是我们并不需要记录这个最优解，所以可以优化为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> w, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; w &gt;&gt; v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j; j -- )</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w)</span><br><span class="line">                dp[j] = max(dp[j], dp[j - w] + v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>锵锵，是不是很神奇呢~~</p><p>原理很简单，我们只是把<strong>i</strong>省掉了，意思是放弃了记录所有前<strong>i</strong>个物品的最优解，转而只保存第<strong>i</strong>个物品的最优解。换句话说，就是现在记录的<code>dp[j]</code>其实就是<code>dp[i][j]</code>，只是其他的<strong>“i”</strong>我们不管了 哼，哼(▼へ▼メ)。</p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心——古神的盛宴</title>
      <link href="2020/10/11/%E7%AE%97%E6%B3%95%EF%BC%9A%E8%B4%AA%E5%BF%83/"/>
      <url>2020/10/11/%E7%AE%97%E6%B3%95%EF%BC%9A%E8%B4%AA%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="贪心——古神的盛宴"><a href="#贪心——古神的盛宴" class="headerlink" title="贪心——古神的盛宴"></a>贪心——古神的盛宴</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在最前面</title>
      <link href="2020/10/11/%E5%86%99%E5%9C%A8%E6%9C%80%E5%89%8D%E9%9D%A2/"/>
      <url>2020/10/11/%E5%86%99%E5%9C%A8%E6%9C%80%E5%89%8D%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="一二三四五六七"><a href="#一二三四五六七" class="headerlink" title="一二三四五六七"></a>一二三四五六七</h1><p>本来已经有一个博客了，但是那边建站用的是WordPress，个人感觉有点过于庸华。</p><p>本着简约至上的理念，再加上最近才知道github可以托管静态页面，就用Hexo建了一个小网站。</p><p>当然，Hexo支持markdown语法，这也让我有种很温馨的感觉。</p><p>就好像森林里的小木屋，大冬天点上一炉篝火，盯着火苗发呆。</p><p>所以大概或许说不定以后会经常在这里更新，写写题解，做做笔记，说说话。</p><p>但是以后还是会从这里搬走······</p><p>搬到哪里去呢······</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404</title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类(^_−)☆</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>slides</title>
      <link href="slides/index.html"/>
      <url>slides/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签o(´^｀)o</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
