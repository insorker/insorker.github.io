<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++授课（1）</title>
      <link href="2020/10/19/C-%E6%8E%88%E8%AF%BE%EF%BC%881%EF%BC%89/"/>
      <url>2020/10/19/C-%E6%8E%88%E8%AF%BE%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="c授课1"><a class="markdownIt-Anchor" href="#c授课1"></a> C++授课（1）</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>一些你需要知道的 C++ 小知识，说实话这个是我后面才写的，因为发现好多东西零零散散的讲太破坏节奏了，所以专门放到了这个 C++ 授课（1）</p><p>嗯，开始吧</p><h2 id="关于"><a class="markdownIt-Anchor" href="#关于"></a> 关于&amp;</h2><p><strong>引用 reference</strong>为对象起了另外一个名字，通过将声明符写成 &amp;d 的形式来定义引用类型，其中 d 是声明的变量名：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ival = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;refVal = ival;<span class="comment">// refVal指向ival（是ival的另外一个名字）</span></span><br><span class="line"><span class="keyword">int</span> &amp;refVa2;<span class="comment">// 报错：引用必须被初始化</span></span><br></pre></td></tr></table></figure><p>引用有点像绑定，两个对象是同一个东西，只是名字不一样</p><p>如果接下来没学过指针和函数就可以选择以后来看，当然现在看也没问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">int</span> &amp;i)</span> </span>&#123; i = <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">42</span>;</span><br><span class="line">reset(j);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; j;<span class="comment">// j的值会被改变</span></span><br></pre></td></tr></table></figure><p>使用引用还可以避免拷贝</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isShorter</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s1.size() &lt; s2.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数无须改变引用形参的值，最好将其声明为常量引用。</p><p>还可以使用引用返回多个值（不做过多介绍了）</p><h2 id="关于const"><a class="markdownIt-Anchor" href="#关于const"></a> 关于const</h2><p>有时我们希望定义这样一种变量，它的值不能被改变。例如，用一个变量来表示缓冲区的大小。使用变量的好处是当我们觉得缓冲区大小不再合适时，很容易对其进行调整。另一方面，也应随时警惕防止程序一不小心改变了这个值。为了满足这一要求，可以用关键字<strong>const</strong>对变量的类型加以限定：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bufSize1 = <span class="number">512</span>;<span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bufSize2;<span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> j = i;<span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">int</span> k = j;<span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><p>这样 bufSize 就被定义成了一个常量。</p><p>同时注意，const 只在文件内有效，如需要在多个文件中使用，则无论是声明还是定义都需要添加 extern 关键字，只需要定义一次就可以了。</p><h3 id="const的引用"><a class="markdownIt-Anchor" href="#const的引用"></a> const的引用</h3><p>我们称为<strong>对常量的引用</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = ci;<span class="comment">// 正确：引用及其对应的对象都是常量</span></span><br><span class="line">r1 = <span class="number">42</span>;<span class="comment">// 错误：r1是对常量的引用</span></span><br><span class="line"><span class="keyword">int</span> &amp;r2 = ci;<span class="comment">// 错误：试图让一个非常量引用指向一个常量对象</span></span><br></pre></td></tr></table></figure><p>上面提到，引用的类型必须与其所引用的对象的类型一致，但是有两个例外。</p><ul><li>在初始化常量引用时允许用任意表达式作为初始值，只要该表达式的结果能转换成引用的类型即可。尤其，允许为一个常量引用绑定非常量的对象、字面值，甚至是个表达式：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r1 = i;<span class="comment">// 允许将const int&amp;绑定到一个普通int对象上</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 = <span class="number">42</span>;<span class="comment">// 正确：r2是一个常量引用</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r3 = r1 * <span class="number">2</span>;<span class="comment">// 正确：r3是一个常量引用</span></span><br><span class="line"><span class="keyword">int</span> &amp;r4 = r1 * <span class="number">2</span>;<span class="comment">// 错误：r4是一个普通非常量引用</span></span><br></pre></td></tr></table></figure><p>要想理解发生这种例外的原因，需要搞清楚到底发生了什么</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;ri = dval;</span><br></pre></td></tr></table></figure><p>此处 ri 引用了一个 int 型的数，因此为了确保 ri 绑定到一个整数，编译器把上述代码变成了如下的形式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> temp = dval;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;ri = temp;</span><br></pre></td></tr></table></figure><p>对常量的引用为非 const 值时，不能通过常量引用对其修改，但是可以直接修改变量，在此不做过多演示了</p><h3 id="指针和const"><a class="markdownIt-Anchor" href="#指针和const"></a> 指针和const</h3><p>指针是对象而引用不是，因此指针本身定为常量是一件非常合乎情理的事情。<strong>常量指针 const pointer</strong>必须初始化，初始化完成后，它的值（也就是存放在指针中的那个地址）就不能改变了。</p><p>把 * 放在 const 关键字之前用以说明指针是一个常量，这样的书写形式隐含着一层意味，即不变的是指针本身的值而非指向的那个值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> errNumb = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> curErr = &amp;errNumb;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> *<span class="keyword">const</span> pip = &amp;pi;<span class="comment">// pip是一个纸箱常量对象的常量指针</span></span><br></pre></td></tr></table></figure><p>小技巧：从右往左读</p><p>离 curErr 最近的符号是 const，意味着 curErr 本身是一个常量对象，* 意味着 currErr是一个常量指针</p><p>所以完全可以通过 curErr 修改 errNumb 的值</p><p>最后既然书上提到了顶层 const 和底层 const，那就顺便说明一下</p><ul><li><strong>顶层 const top-level const</strong>表示指针本身是个常量；更一般的，</li><li><strong>底层 const low-level const</strong>表示指针所指的对象是个常量</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> p1 = &amp;i; <span class="comment">// 不能改变p1的值，这是一个顶层 const</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = <span class="number">42</span>; <span class="comment">// 不能改变ci的值，这是一个顶层 const</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p2 = &amp;ci; <span class="comment">// 允许改变p2的值，这是一个底层 const</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> p3 = p2 <span class="comment">// 靠右的const是顶层const，靠左的是底层const</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r = ci; <span class="comment">// 用于声明引用的const都是底层const</span></span><br></pre></td></tr></table></figure><p>执行拷贝操作时，顶层 const 和底层 const 区别明显，这里不再赘述。</p><h3 id="函数的-const"><a class="markdownIt-Anchor" href="#函数的-const"></a> 函数的 const</h3><p>尽量使用常量引用作为参数</p><p>其他不再多说，有兴趣可以自己查阅资料</p><h2 id="关于iostreamostream"><a class="markdownIt-Anchor" href="#关于iostreamostream"></a> 关于iostream，ostream</h2>]]></content>
      
      
      
        <tags>
            
            <tag> C++授课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++授课（4）</title>
      <link href="2020/10/19/C-%E6%8E%88%E8%AF%BE%EF%BC%884%EF%BC%89/"/>
      <url>2020/10/19/C-%E6%8E%88%E8%AF%BE%EF%BC%884%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="c授课4"><a class="markdownIt-Anchor" href="#c授课4"></a> C++授课（4）</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><h3 id="写在前面-2"><a class="markdownIt-Anchor" href="#写在前面-2"></a> 写在前面</h3><h4 id="写在前面-3"><a class="markdownIt-Anchor" href="#写在前面-3"></a> 写在前面</h4><h5 id="写在前面-4"><a class="markdownIt-Anchor" href="#写在前面-4"></a> 写在前面</h5><h6 id="写在前面-5"><a class="markdownIt-Anchor" href="#写在前面-5"></a> 写在前面</h6><h2 id="类的其他特性"><a class="markdownIt-Anchor" href="#类的其他特性"></a> 类的其他特性</h2><p>这些特性包括：</p><p>类型成员、类的成员的类内初始值、可变数据成员、内联成员函数、从成员函数返回*this、关于如何定义并使用类类型及友元类</p><p>为了展示这些新的特性，定义一对相互关联的类，它们分别是 Screen 和Window_mgr。</p><hr /><p>Screen 表示显示器中的一个窗口。每个 Screen 包含一个用于保存 Screen 内容的 string 成员和三个 string::size_type 类型的成员，它们分别用于表示光标的位置以及屏幕的高和宽。</p><p>除了定义数据和函数成员之外，类还可以自定义某种类型在类中的别名。由类定义的类型名字和其他成员一样存在访问限制，可以是 public 或者 private 中的一种：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">string</span>::size_type pos;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">pos cursor = <span class="number">0</span>;</span><br><span class="line">pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> contents;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这样也可以</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> pos = <span class="built_in">std</span>::<span class="built_in">string</span>::size_type;</span><br></pre></td></tr></table></figure><p>然后让我们写一个构造函数吧，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">string</span>::size_type pos;</span><br><span class="line">    Screen() = <span class="keyword">default</span>;</span><br><span class="line">    Screen(pos ht, pos wd, <span class="keyword">char</span> c): height(ht), width(wd),</span><br><span class="line">    contents(ht * wd, c) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span><span class="comment">// 读取光标处的字符</span></span></span><br><span class="line"><span class="function">     </span>&#123; <span class="keyword">return</span> contents[cursor]; &#125;<span class="comment">// 隐式内联</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">get</span><span class="params">(pos ht, pos wd)</span> <span class="keyword">const</span></span>;<span class="comment">// 显式内联</span></span><br><span class="line">    <span class="function">Screen &amp;<span class="title">move</span><span class="params">(pos r, pos c)</span></span>;<span class="comment">// 能在之后被设为内联</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">pos cursor = <span class="number">0</span>;</span><br><span class="line">pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> contents;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义在类内部的成员函数是自动 inline 的，因此，构造函数和 get 都默认是 inline 函数。</p><p>也可以在类的外部用 inline 关键字修饰函数的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">inline</span><br><span class="line">Screen &amp;Screen::move(pos r, pos c)</span><br><span class="line">&#123;</span><br><span class="line">pos row &#x3D; r * width;</span><br><span class="line">cursor &#x3D; row + c;</span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C++授课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++授课（3）</title>
      <link href="2020/10/19/C-%E6%8E%88%E8%AF%BE%EF%BC%883%EF%BC%89/"/>
      <url>2020/10/19/C-%E6%8E%88%E8%AF%BE%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="c基础3"><a class="markdownIt-Anchor" href="#c基础3"></a> C++基础（3）</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>今夜月色真美</p><h2 id="类的概念"><a class="markdownIt-Anchor" href="#类的概念"></a> 类的概念</h2><p>书接上文，我们说到类的基本构造，但是我们始终避而不提的是一个非常重要的话题，就是对数据进行计算，而我们又会说，既然 Sales_data 的数据成员是 private 的，我们也就不能够进行加减输出操作了，因为他们不是类的成员（虽然我们可以把它们作为类的成员函数，但是没有但是，我说什么就是什么，你有意见？）</p><p>类可以允许其他类或者函数访问它的非公有成员，方法是令其他类或者函数成为它的<strong>友元 friend</strong>。如果类想把一个函数作为它的友元，只需要增加一条以 friend 关键字开始的函数声明语句即可：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sales_data</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> Sales_data <span class="title">add</span><span class="params">(<span class="keyword">const</span> Sales_data&amp;, <span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="built_in">std</span>::istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream&amp;, Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="built_in">std</span>::ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream&amp;, <span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Sales_data() = <span class="keyword">default</span>;</span><br><span class="line">Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s): bookNo(s) &#123; &#125;</span><br><span class="line">Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s, <span class="keyword">unsigned</span> n, <span class="keyword">double</span> p):</span><br><span class="line">   bookNo(s), units_sold(n), revenue(p * n) &#123; &#125;</span><br><span class="line">Sales_data(<span class="built_in">std</span>::istream &amp;);</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line"><span class="function">Sales_data &amp;<span class="title">combine</span><span class="params">(<span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="keyword">const</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> units_sold ? revenue/units_sold : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> bookNo;</span><br><span class="line"><span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Sales_data接口的非成员组成部分的声明，需要提供独立的声明</span></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="keyword">const</span> Sales_data&amp;, <span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream&amp;, Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream&amp;, <span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br></pre></td></tr></table></figure><p>这样我们就可以在友元函数里面使用类的私有成员了，而且这几个函数不属于类的成员函数，而且的而且友元的声明一般放在类的头文件里。</p><p>让我们来把这些友元函数给完善一下吧，我们定义非成员函数的方式与定义其他函数一样，通常是把函数的声明和定义分离开来。如果函数在概念上属于类但是不定义在类中，则它一般应与类的声明放在同一个头文件中（事实上也确实如此）。在这种方式下，用户使用接口的任何部分都只要引入一个头文件。</p><h3 id="read"><a class="markdownIt-Anchor" href="#read"></a> read()</h3><p>首先用简单的代码写一个逻辑：读入销售数据：ISBN、销售数量、单价</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> price = <span class="number">0</span>;<span class="comment">// 书的单价</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; data1.bookNo &gt;&gt; data1.units_sold &gt;&gt; price;<span class="comment">// 读入交易信息（cin真的是方便呀）</span></span><br><span class="line">data1.revenue = data1.units_sold * price;<span class="comment">// 计算收入</span></span><br></pre></td></tr></table></figure><p>然后稍加修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">istream &amp;<span class="title">read</span><span class="params">(istream &amp;is, Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> price = <span class="number">0</span>;</span><br><span class="line">is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;</span><br><span class="line">item.revenue = item.units_sold * price;</span><br><span class="line"><span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>return istream&amp;可以实现判断，并实现持续输入（具体我也不是很清楚，以后想起来了再改）</p><h3 id="print"><a class="markdownIt-Anchor" href="#print"></a> print()</h3><p>输出就很简单了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ostream &amp;<span class="title">print</span><span class="params">(ostream &amp;os, <span class="keyword">const</span> Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">os &lt;&lt; item.isbn() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.units_sold &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">   &lt;&lt; item.revenue &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.avg_price();</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="add"><a class="markdownIt-Anchor" href="#add"></a> add()</h3><p>就是两个“数”的和嘛</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;lhs, <span class="keyword">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Sales_data sum = lhs;</span><br><span class="line">sum.combine(rhs);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 combine 函数就是相当于 += ，我们顺便实现一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Sales_data&amp; <span class="title">Sales_data::combine</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">units_sold += rhs.units_sold;<span class="comment">// 把rhs的成员加到this对象的成员上</span></span><br><span class="line">revenue += rhs.revenue;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">// 返回调用该函数的对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数一个值得关注的部分是它的返回类型和返回语句。一般来说，当我们定义的函数类似于某个内置运算符时，应该令该函数的行为尽量模仿这个运算符。内置的赋值运算符把它的左侧运对象当成左值返回，因此为了与它保持一致，combine 函数必须返回引用类型。因此此时的左侧运算对象是一个 Sales_data 的对象，所以返回类型应该是 Sales_data&amp;。</p><p>好啦，Sales_data 类的基本东西我们差不多都学完啦</p><p>完整代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sales_data</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> Sales_data <span class="title">add</span><span class="params">(<span class="keyword">const</span> Sales_data&amp;, <span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="built_in">std</span>::istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream&amp;, Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="built_in">std</span>::ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream&amp;, <span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Sales_data() = <span class="keyword">default</span>;</span><br><span class="line">Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s): bookNo(s) &#123; &#125;</span><br><span class="line">Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s, <span class="keyword">unsigned</span> n, <span class="keyword">double</span> p):</span><br><span class="line">   bookNo(s), units_sold(n), revenue(p * n) &#123; &#125;</span><br><span class="line">Sales_data(<span class="built_in">std</span>::istream &amp;);</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line"><span class="function">Sales_data &amp;<span class="title">combine</span><span class="params">(<span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="keyword">const</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> units_sold ? revenue/units_sold : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> bookNo;</span><br><span class="line"><span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Sales_data接口的非成员组成部分的声明，需要提供独立的声明</span></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="keyword">const</span> Sales_data&amp;, <span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream&amp;, Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream&amp;, <span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data&amp; <span class="title">Sales_data::combine</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">units_sold += rhs.units_sold;<span class="comment">// 把rhs的成员加到this对象的成员上</span></span><br><span class="line">revenue += rhs.revenue;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">// 返回调用该函数的对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;lhs, <span class="keyword">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Sales_data sum = lhs;</span><br><span class="line">sum.combine(rhs);</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">istream &amp;<span class="title">read</span><span class="params">(istream &amp;is, Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> price = <span class="number">0</span>;</span><br><span class="line">is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;</span><br><span class="line">item.revenue = item.units_sold * price;</span><br><span class="line"><span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ostream &amp;<span class="title">print</span><span class="params">(ostream &amp;os, <span class="keyword">const</span> Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">os &lt;&lt; item.isbn() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.units_sold &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">   &lt;&lt; item.revenue &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; item.avg_price();</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C++授课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++授课（2）</title>
      <link href="2020/10/19/C-%E6%8E%88%E8%AF%BE%EF%BC%882%EF%BC%89/"/>
      <url>2020/10/19/C-%E6%8E%88%E8%AF%BE%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="c基础2"><a class="markdownIt-Anchor" href="#c基础2"></a> C++基础（2）</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>不知道写什么不知道写什么不知道写什么不知道写什么不知道写什么不知道写什么不知道写什么不知道写什么不知道写什么不知道写什么不知道写什么不知道写什么不知道写什么不知道写什么</p><h2 id="类的概念"><a class="markdownIt-Anchor" href="#类的概念"></a> 类的概念</h2><blockquote><p>你可能会好奇为什么第一节课就涉及到类的知识，当然不用太过担心无法理解，我们希望在能接受的范围内，让课程更加有趣一点。不过在开始之前，我们希望你对 C 语言的基础语法已经有过一定的学习，不至于一点都看不懂。</p><p>需要基础：会一点变量和函数</p></blockquote><p>首先，我们先来探讨一下<strong>对象</strong>的概念，一只狗可以是一个对象，一个人可以是一个对象，一辆小汽车也可以是一个对象，就连天边飘过的云朵也可以是一个对象。对象是个非常自然的概念（你们一定有了，对，我就是指的内个，可恶），区别于过程，对象把一系列过程的行为转化为一个具体的对象的行为，使得程序更具有封装性、继承性、和多态性。</p><p>C++ 的其中一个语法特性就是<strong>类</strong>。我们常说“物以类聚，人以群分”，类可以帮助我们定义不同的数据类型，或者换句话说，类把一些对象中共同的属性和方法提取了出来，做出了一个抽象的模型，然后我们可以用这个模型，去创造不同的对象。类的基本思想就是数据抽象和封装，一个类定义了一个类型，以及与其相关联的一组操作。</p><p>那么接下来我们就遇到了一个小目标：编写一个程序来解决简单的书店问题。</p><p>先简单介绍一下，</p><p>我们的书店保存所有销售记录的档案，每条记录保存了某本书的一次销售的信息（一册或多册）。每条记录包含三个数据项：</p><p><strong>0-201-70353-x424.99</strong></p><p>第一项是书的 ISBN 号（国际标准书号，一本书的唯一标识），第二项是售出的册数，最后一项是书的单价。有时，书店老板需要查询此档案，计算每本书的销售量、销售额及平均售价。</p><p>虽然我们还没有编写这个程序，但显然它必须有</p><ul><li>定义变量</li><li>进行输入和输出</li><li>使用数据结构保存数据</li><li>检测两条记录是否有相同的 ISBN</li><li>包含一个循环来处理销售档案中的每条记录</li></ul><p>我们接下来就来实际自己定义一个类 Sales_data ：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sales_data</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Sales_data() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printdata</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, bookNo); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> bookNo[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> units_sold = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义在 <strong>public</strong> 说明符之后的成员在整个程序内可被访问，public 成员定义类的接口（即可以调用的东西）</li><li>定义在 <strong>private</strong> 说明符之后的成员可以被类的成员函数访问，但是不能被使用该类的代码访问，private 部分封装了（即隐藏了）类的实现细节</li></ul><p>这就是一个类的标准写法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名  // 通常是大写</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//公共的行为或属性</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//公共的行为或属性</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们也可以很轻松的从外部创建一个类的对象，使用起来和 int 一样自然</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Salas_data book;</span><br><span class="line">book.printdata();<span class="comment">// 用操作符“.”访问类中的变量与函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，我们直接给 Sales_data 中 private 修饰下变量赋值是错误的，例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">book.revenue = <span class="number">1.0</span>;<span class="comment">// 会报错</span></span><br></pre></td></tr></table></figure><p>上面类中的语法大部分是 C 语言的，我们改变为 C++ 的语法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sales_data</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Sales_data() = <span class="keyword">default</span>;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> bookNo;</span><br><span class="line"><span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请先不要把鼠标移到关闭上，秋梨膏</p><p>先介绍一下 C++ 的输入输出（不做详细介绍了）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &gt;&gt; n &gt;&gt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前两行必须要添加，using namespace std 实际上是在使用 std 这个命名空间，这个命名空间里有 std::cout、std::cin、std::string 等</p><p>string 可以暂时理解为 C 语言中的字符串。</p><p>当然我们也可以这么写，也没问题</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他内容交给你们自学啦（&lt;&lt;，&gt;&gt;这两个符号不是很形象嘛）</p><hr /><p>下面我们来分析一下每句话的含义，首先是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sales_data() = <span class="keyword">default</span>;</span><br></pre></td></tr></table></figure><p>每个类都分别定义了它的对象被初始化的方式，类通过一个或几个特殊的成员函数来控制其他对象的初始化过程，这些函数叫做<strong>构造函数 constructor</strong>。构造函数的任务是初始化类的对象的数据成员（比如bookNo、units_sold、revenue），无论何时类的对象被创建，就会执行构造函数。</p><p>没有构造函数的情况下，会执行默认初始化。类通过一个特殊的构造函数来控制默认初始化过程，这个函数叫做<strong>默认构造函数</strong>。默认构造函数无需任何参数（初始化规则不再赘述）。</p><ul><li>如果存在类内的初始值，用它来初始化成员</li><li>否则，默认初始化该成员</li></ul><p>我们原来的构造函数就是使用默认构造函数。</p><p>那我们现在再定义四个全新的构造函数“</p><ul><li>一个 istream&amp;，从中读取一条交易信息</li><li>一个 const string&amp;，表示 ISBN 编号；一个 unsigned，表示售出的图书数量；以及一个 double，表示图书的售出价格</li><li>一个 const string&amp;，表示 ISBN 编号；编译器将赋予其他成员默认值</li><li>一个空参数列表（即默认构造函数），正如刚刚介绍的，既然我们已经定义了其他构造函数，那么也必须定义一个默认构造函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sales_data</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Sales_data() = <span class="keyword">default</span>;</span><br><span class="line">Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s): bookNo(s) &#123; &#125;</span><br><span class="line">Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s, <span class="keyword">unsigned</span> n, <span class="keyword">double</span> p):</span><br><span class="line">   bookNo(s), units_sold(n), revenue(p * n) &#123; &#125;</span><br><span class="line">Sales_data(<span class="built_in">std</span>::istream &amp;);<span class="comment">// 暂且放到一边</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新出现的部分让人偷鱼烟花，其中花括号定义了（空的）函数体。我们把新出现的部分称为<strong>构造函数初始值列表 constructor initialize list</strong>，它负责为新创建的对象的一个或几个数据成员赋初值。构造函数初始值是成员名字的一个列表，每个名字后面紧跟括号括起来的（或者在花括号内的）成员初始值。不同成员的初始化通过逗号隔开来。</p><p>至于</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s): bookNo(s) &#123; &#125;</span><br></pre></td></tr></table></figure><p>另外两个变量会执行隐式初始化，变成 0。</p><p>在构造函数之外我们还需要定义一些函数，比如算平均价格、求书的 isbn，我们也可以写在类中，完整的类就长这样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sales_data</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Sales_data() = <span class="keyword">default</span>;</span><br><span class="line">Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s): bookNo(s) &#123; &#125;</span><br><span class="line">Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s, <span class="keyword">unsigned</span> n, <span class="keyword">double</span> p):</span><br><span class="line">   bookNo(s), units_sold(n), revenue(p * n) &#123; &#125;</span><br><span class="line">Sales_data(<span class="built_in">std</span>::istream &amp;);<span class="comment">// 暂且放到一边</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line"><span class="function">Sales_data &amp;<span class="title">combine</span><span class="params">(<span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="keyword">const</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> units_sold ? revenue/units_sold : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> bookNo;</span><br><span class="line"><span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>又是一个小细节，注意成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br></pre></td></tr></table></figure><p>我们来解析一下</p><p>对这个函数的调用很简单，需要用到点预算符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sales_data book1;</span><br><span class="line"><span class="built_in">string</span> isbn1 = book.isbn();</span><br></pre></td></tr></table></figure><p>还有一点是成员函数通过一个名为<strong>this</strong>的额外的隐式参数来访问调用它的那个对象。当我们调用一个成员函数时，用请求改函数的对象地址初始化 this 。例如，如果调用 total.isbn()，则编译器负责把 total 的地址传递给 isbn 的隐式形参 this，可以等价地认为编译器将改调用重写成了如下的形式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码，用于说明调用成员函数的实际执行过程</span></span><br><span class="line">Sales_data::isbn(&amp;total)</span><br></pre></td></tr></table></figure><p>其中，调用 Sales_data 的 isbn 成员时传入了 total 的地址。</p><p>也就是说 isbn 使用 bookNo 时，它隐式地使用 this 指向的成员变量，就像我们书写了 this-&gt;bookNo 一样。</p><p>也可以把上面的函数写成这种形式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;bookNo; &#125;</span><br></pre></td></tr></table></figure><p>最后引入了 const 成员函数</p><p>紧跟在参数列表后面的 const 表示 this 是一个指向常量的指针。想这样使用 const 的成员函数被称作<strong>常量成员函数 const member function</strong></p><p>可以把 isbn 的函数体想象成如下的形式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码，说明隐式地this指针是如何使用的</span></span><br><span class="line"><span class="comment">// 下面的代码是非法的：因为我们不能显式的定义自己的this指针</span></span><br><span class="line"><span class="comment">// 谨记此处的this是一个指向常量的指针，因为isbn是一个常量成员</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">Sales_data::isbn</span><span class="params">(<span class="keyword">const</span> Sales_data *<span class="keyword">const</span> <span class="keyword">this</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;isbn; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C++授课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++授课（0）</title>
      <link href="2020/10/19/C-%E6%8E%88%E8%AF%BE%EF%BC%880%EF%BC%89/"/>
      <url>2020/10/19/C-%E6%8E%88%E8%AF%BE%EF%BC%880%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="c授课序"><a class="markdownIt-Anchor" href="#c授课序"></a> C++授课（序）</h1><h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>欢迎大家来到 C++ 组听我们的授课，很荣幸能有机会和大家一起学习 C++ 这门语言， C++ 继承了 C 语言很多优秀之处，并在其上开发出了面向对象的新功能，在当今的社会中用途也极广。 C++ 是一门基本上不可能精通的语言，我本人对 C++ 的了解也处于入门摸索的状态，希望能和大家共同进步。如果有任何好的建议，可以发送邮件至insorker@qq.com，我们会认真听取你们的建议，同时也希望能通过博客记录，留下一些能帮助到你们的东西。</p><h1 id="授课计划"><a class="markdownIt-Anchor" href="#授课计划"></a> 授课计划</h1><p>现在是 2020.10.19 17:37 ，目前的打算是以《C++ Primer 中文版 第5版》和《Qt Creator快速入门_第三版__霍亚飞编著》这两本书为参考，讲解 C++ 基础语法和 Qt 的相关使用，目标是能做出一款自己的桌面应用，并在程序设计周上取得好成绩（好耶）。</p><p>授课计划目录：</p><ol><li>C++ 基础</li><li>C++ 基础</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> C++授课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉堆——是二叉堆，不是叉烧哦~</title>
      <link href="2020/10/15/%E7%AE%97%E6%B3%95%EF%BC%9A%E4%BA%8C%E5%8F%89%E5%A0%86/"/>
      <url>2020/10/15/%E7%AE%97%E6%B3%95%EF%BC%9A%E4%BA%8C%E5%8F%89%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉堆是二叉堆不是叉烧哦~"><a class="markdownIt-Anchor" href="#二叉堆是二叉堆不是叉烧哦~"></a> 二叉堆——是二叉堆，不是叉烧哦~</h1><p>《挑战程序设计竞赛》给出了一份实现的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> heap[MAX_N], sz = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 自己节点的编号</span></span><br><span class="line"><span class="keyword">int</span> i = sz ++ ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 父亲节点的编号</span></span><br><span class="line"><span class="keyword">int</span> p = (i - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 如果已经没有大小颠倒则退出</span></span><br><span class="line"><span class="keyword">if</span> (heap[p] &lt;= x) <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//把父亲节点的数值放下来，而把自己提上去</span></span><br><span class="line">heap[i] = heap[p];</span><br><span class="line">i = p;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">heap[i] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 最小值</span></span><br><span class="line">    <span class="keyword">int</span> ret = heap[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 要提到根的数值</span></span><br><span class="line">    <span class="keyword">int</span> x = heap[ -- sz];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从根开始向下交换</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i * <span class="number">2</span> + <span class="number">1</span> &lt; sz)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 比较儿子的值</span></span><br><span class="line">        <span class="keyword">int</span> a = i * <span class="number">2</span> + <span class="number">1</span>, b = <span class="number">1</span> * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (b &lt; sz &amp;&amp; heap[b] &lt; heap[a]) a = b;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果已经没有大小点到则退出</span></span><br><span class="line">        <span class="keyword">if</span> (heap[a] &gt;= x) <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 把儿子的数值提上来</span></span><br><span class="line">        heap[i] = heap[a];</span><br><span class="line">        i = a;</span><br><span class="line">    &#125;</span><br><span class="line">    heap[i] = x;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分法——静心之峰</title>
      <link href="2020/10/15/%E7%AE%97%E6%B3%95%EF%BC%9A%E4%BA%8C%E5%88%86%E6%B3%95/"/>
      <url>2020/10/15/%E7%AE%97%E6%B3%95%EF%BC%9A%E4%BA%8C%E5%88%86%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="二分法静心之峰"><a class="markdownIt-Anchor" href="#二分法静心之峰"></a> 二分法——静心之峰</h1><h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>日常生活中我们就在不断使用二分法，这种方法的效率非常高，我们可以看到</p><blockquote><p>log<sub>2</sub>(1024) = 10</p></blockquote><p>所以也就是说，以二分法几乎是遍历的1 / 100，还要更小。</p><p>这在大数据的面前更是出奇的有效。</p><p>所以我们肯定是要使用二分法。</p><p>但是二分法有一定局限性，最基本的一点就是二分法需要一个单调的数列才可以二分。</p><p>所以一般情况下我们要对数列排列后才可以去使用二分法，而排列的复杂度大约是 O(nlogn)。</p><p>这样就把二分法在 logn 领域几乎锁死了（我是指做题），只能把 n<sup>2</sup> 的算法优化为 nlogn。</p><p>不给例题了，没有太大的意义。</p><p>直接上模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板一</span></span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &lt; k) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板二</span></span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &gt; k) r = mid;</span><br><span class="line"><span class="keyword">else</span> l = mid + <span class="number">1</span>;C</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符动画代码</title>
      <link href="2020/10/14/%E5%AD%97%E7%AC%A6%E5%8A%A8%E7%94%BB%E4%BB%A3%E7%A0%81/"/>
      <url>2020/10/14/%E5%AD%97%E7%AC%A6%E5%8A%A8%E7%94%BB%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="bmpreadhpp"><a class="markdownIt-Anchor" href="#bmpreadhpp"></a> bmpread.hpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BMPREAD_HPP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BMPREAD_HPP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BMPFILEHEADERLENGTH 14  <span class="comment">// 位图文件头</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BMPINFOHEADERLENGTH 40  <span class="comment">// 位图信息头</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OFFSET 54   <span class="comment">// 偏移量（头部到数据部分）</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BM 19778    <span class="comment">// ASCII码</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBmpFile</span><span class="params">(FILE* fpbmp)</span></span>;            <span class="comment">// 判断是否为bmp文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getBmpWidthHeightStridePixChpix</span><span class="params">(FILE* fpbmp)</span></span>;    <span class="comment">// 获取文件宽高（像素）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getCharacter</span><span class="params">(FILE* fpbmp)</span></span>;     <span class="comment">// 转换为字符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recursur</span><span class="params">()</span></span>;   <span class="comment">//设置光标位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printChpix</span><span class="params">()</span></span>;    <span class="comment">//打印字符画</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveChpix</span><span class="params">(FILE* fpch)</span></span>;     <span class="comment">//保存字符画</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">showCh</span><span class="params">(FILE* fpbmp, FILE* fpch = <span class="literal">NULL</span>)</span></span>;    <span class="comment">//外部可调用</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">saveCh</span><span class="params">(FILE* fpbmp, FILE* fpch)</span></span>;   <span class="comment">//外部可调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩后 （每个字符高度是宽度两倍时）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getCharacterZIP</span><span class="params">(FILE* fpbmp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printChpixZIP</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveChpixZIP</span><span class="params">(FILE* fpch)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">showChZIP</span><span class="params">(FILE* fpbmp, FILE* fpch = <span class="literal">NULL</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">saveChZIP</span><span class="params">(FILE* fpbmp, FILE* fpch)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="bmpreadcpp"><a class="markdownIt-Anchor" href="#bmpreadcpp"></a> bmpread.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bmpread.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> g_width, g_height, g_stride;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* g_linepix;</span><br><span class="line"><span class="keyword">char</span>* g_chpix;</span><br><span class="line"><span class="keyword">char</span>* g_chpixZIP;</span><br><span class="line"><span class="keyword">char</span> g_character[] = &#123;<span class="string">&quot;$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,\&quot;^` .&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">showCh</span><span class="params">(FILE* fpbmp, FILE* fpch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isBmpFile(fpbmp))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不是bmp文件&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getCharacter(fpbmp);</span><br><span class="line">    printChpix();</span><br><span class="line">    <span class="built_in">free</span>(g_linepix), <span class="built_in">free</span>(g_chpix), <span class="built_in">free</span>(g_chpixZIP);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">saveCh</span><span class="params">(FILE* fpbmp, FILE* fpch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    getCharacter(fpbmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fpch != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        saveChpix(fpch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(g_linepix), <span class="built_in">free</span>(g_chpix), <span class="built_in">free</span>(g_chpixZIP);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBmpFile</span><span class="params">(FILE* fpbmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> bfType = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    fseek(fpbmp, <span class="number">0L</span>, SEEK_SET);</span><br><span class="line">    fread(&amp;bfType, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">2</span>, fpbmp);</span><br><span class="line">    <span class="keyword">if</span> (BM != bfType)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getBmpWidthHeightStridePixChpix</span><span class="params">(FILE* fpbmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fseek(fpbmp, <span class="number">18L</span>, SEEK_SET);</span><br><span class="line">    fread(&amp;g_width, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">4</span>, fpbmp);</span><br><span class="line">    fseek(fpbmp, <span class="number">22L</span>, SEEK_SET);</span><br><span class="line">    fread(&amp;g_height, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">4</span>, fpbmp);</span><br><span class="line"></span><br><span class="line">    g_stride = (<span class="number">24</span> * g_width) / <span class="number">8</span>;</span><br><span class="line">    g_stride = (g_stride + <span class="number">3</span>) / <span class="number">4</span> * <span class="number">4</span>;</span><br><span class="line">    g_linepix = (<span class="keyword">unsigned</span> <span class="keyword">char</span>* )<span class="built_in">malloc</span>(g_stride);</span><br><span class="line">    g_chpix = (<span class="keyword">char</span>* )<span class="built_in">malloc</span>((g_width + <span class="number">1</span>) * g_height);</span><br><span class="line">    g_chpixZIP = (<span class="keyword">char</span>* )<span class="built_in">malloc</span>((g_width + <span class="number">1</span>) * g_height / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getCharacter</span><span class="params">(FILE* fpbmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fseek(fpbmp, OFFSET, SEEK_SET);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> gray = <span class="number">0</span>, len = <span class="built_in">strlen</span>(g_character) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = g_height - <span class="number">1</span>; r &gt;= <span class="number">0</span>; r -- )</span><br><span class="line">    &#123;</span><br><span class="line">        fread(g_linepix, <span class="number">1</span>, g_stride, fpbmp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; g_width; c ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            gray = (<span class="keyword">int</span>)(g_linepix[c * <span class="number">3</span> + <span class="number">2</span>] * <span class="number">0.3</span> + g_linepix[c * <span class="number">3</span> + <span class="number">1</span>] * <span class="number">0.59</span> + g_linepix[c * <span class="number">3</span>] * <span class="number">0.11</span>);</span><br><span class="line">            g_chpix[c + r * (g_width + <span class="number">1</span>)] = g_character[(<span class="keyword">int</span>)(gray / <span class="number">256.0</span> * len)];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        g_chpix[(r + <span class="number">1</span>) * (g_width + <span class="number">1</span>) - <span class="number">1</span>] = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g_chpix[g_height * (g_width + <span class="number">1</span>)] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recursur</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hout;</span><br><span class="line">    COORD coord;</span><br><span class="line">    coord.X = <span class="number">0</span>;</span><br><span class="line">    coord.Y = <span class="number">0</span>;</span><br><span class="line">    hout = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">    SetConsoleCursorPosition(hout,coord);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printChpix</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    recursur();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, g_chpix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveChpix</span><span class="params">(FILE* fpch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fseek(fpch, <span class="number">0L</span>, SEEK_SET);</span><br><span class="line">    <span class="built_in">fprintf</span>(fpch, <span class="string">&quot;%s&quot;</span>, g_chpix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getCharacterZIP</span><span class="params">(FILE* fpbmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fseek(fpbmp, OFFSET, SEEK_SET);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> gray = <span class="number">0</span>, len = <span class="built_in">strlen</span>(g_character) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> r = (g_height - <span class="number">1</span>) / <span class="number">2</span>; r &gt;= <span class="number">0</span>; r -- )</span><br><span class="line">    &#123;</span><br><span class="line">        fread(g_linepix, <span class="number">1</span>, g_stride, fpbmp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; g_width; c ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            gray = (<span class="keyword">int</span>)(g_linepix[c * <span class="number">3</span> + <span class="number">2</span>] * <span class="number">0.3</span> + g_linepix[c * <span class="number">3</span> + <span class="number">1</span>] * <span class="number">0.59</span> + g_linepix[c * <span class="number">3</span>] * <span class="number">0.11</span>);</span><br><span class="line">            g_chpixZIP[c + r * (g_width + <span class="number">1</span>)] = g_character[(<span class="keyword">int</span>)(gray / <span class="number">256.0</span> * len)];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        g_chpixZIP[(r + <span class="number">1</span>) * (g_width + <span class="number">1</span>) - <span class="number">1</span>] = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!feof(fpbmp)) fread(g_linepix, <span class="number">1</span>, g_stride, fpbmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g_chpixZIP[((g_height - <span class="number">1</span>) / <span class="number">2</span> + <span class="number">1</span>) * (g_width + <span class="number">1</span>)] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveChpixZIP</span><span class="params">(FILE* fpch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fseek(fpch, <span class="number">0L</span>, SEEK_SET);</span><br><span class="line">    <span class="built_in">fprintf</span>(fpch, <span class="string">&quot;%s&quot;</span>, g_chpixZIP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printChpixZIP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    recursur();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, g_chpixZIP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">showChZIP</span><span class="params">(FILE* fpbmp, FILE* fpch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isBmpFile(fpbmp))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不是bmp文件&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getCharacterZIP(fpbmp);</span><br><span class="line">    printChpixZIP();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fpch != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        saveChpixZIP(fpch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">saveChZIP</span><span class="params">(FILE* fpbmp, FILE* fpch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    getCharacterZIP(fpbmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fpch != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        saveChpixZIP(fpch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(g_linepix), <span class="built_in">free</span>(g_chpix), <span class="built_in">free</span>(g_chpixZIP);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="maincpp"><a class="markdownIt-Anchor" href="#maincpp"></a> main.cpp</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;bmpread.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">badappletxt</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">badappleT</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">badappleC</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onePic</span><span class="params">(<span class="keyword">char</span> *inpath, <span class="keyword">char</span> *outpath)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>* g_linepix;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>* g_chpix;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>* g_chpixZIP;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">&quot;chcp 437&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;mode con cols=220 lines=150&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;color F0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    PlaySound(&quot;BadApple.wav&quot;, NULL, SND_FILENAME | SND_ASYNC);</span></span><br><span class="line"><span class="comment">//    badappleC();</span></span><br><span class="line"><span class="comment">//    onePic(&quot;picture/2.bmp&quot;, &quot;picture/2.txt&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">badappletxt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE* fpin = fopen(<span class="string">&quot;baddapple12/badapple0000.bmp&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    getBmpWidthHeightStridePixChpix(fpin);</span><br><span class="line">    fclose(fpin);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2628</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> path[<span class="number">30</span>] = <span class="string">&quot;\0&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sprintf</span>(path, <span class="string">&quot;%s%04d%s&quot;</span>, <span class="string">&quot;baddapple12/badapple&quot;</span>, i, <span class="string">&quot;.bmp&quot;</span>);</span><br><span class="line">        FILE* fpin = fopen(path, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(path, <span class="string">&quot;%s%04d%s&quot;</span>, <span class="string">&quot;txt/badapple&quot;</span>, i, <span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">        FILE* fpout = fopen(path, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        saveChZIP(fpin, fpout);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;has done:%d\n&quot;</span>, i);</span><br><span class="line"></span><br><span class="line">        fclose(fpin);</span><br><span class="line">        fclose(fpout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(g_linepix), <span class="built_in">free</span>(g_chpix), <span class="built_in">free</span>(g_chpixZIP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">badappleT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    badappletxt();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">33000</span>] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">char</span> *p = buf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> cd = <span class="number">1000</span> / <span class="number">60.0</span>;        <span class="comment">//每秒60帧</span></span><br><span class="line">    <span class="keyword">clock_t</span> beginClock = clock();</span><br><span class="line">    <span class="keyword">double</span> totalCd = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5215</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> path[<span class="number">30</span>] = <span class="string">&quot;\0&quot;</span>;</span><br><span class="line">        <span class="built_in">sprintf</span>(path, <span class="string">&quot;%s%04d%s&quot;</span>, <span class="string">&quot;txt/badapple&quot;</span>, i, <span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">        FILE* fpout = fopen(path, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        p = buf;</span><br><span class="line">        recursur();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!feof(fpout))</span><br><span class="line">        &#123;</span><br><span class="line">            *p = fgetc(fpout);</span><br><span class="line">            p ++ ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (clock() &gt;= beginClock + cd)</span><br><span class="line">            &#123;</span><br><span class="line">                totalCd += cd;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Frame:%d&quot;</span>, i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fclose(fpout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">badappleC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE* fpin = fopen(<span class="string">&quot;baddapple12/badapple0000.bmp&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    getBmpWidthHeightStridePixChpix(fpin);</span><br><span class="line">    fclose(fpin);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2628</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> path[<span class="number">30</span>] = <span class="string">&quot;\0&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sprintf</span>(path, <span class="string">&quot;%s%04d%s&quot;</span>, <span class="string">&quot;baddapple12/badapple&quot;</span>, i, <span class="string">&quot;.bmp&quot;</span>);</span><br><span class="line">        FILE* fpin = fopen(path, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(path, <span class="string">&quot;%s%04d%s&quot;</span>, <span class="string">&quot;txt/badapple&quot;</span>, i, <span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">        FILE* fpout = fopen(path, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;the current frame is : %d&quot;</span>, i);</span><br><span class="line">        showChZIP(fpin);</span><br><span class="line"></span><br><span class="line">        fclose(fpin);</span><br><span class="line">        fclose(fpout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(g_linepix), <span class="built_in">free</span>(g_chpix), <span class="built_in">free</span>(g_chpixZIP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onePic</span><span class="params">(<span class="keyword">char</span> *inpath, <span class="keyword">char</span> *outpath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE* fpin = fopen(inpath, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    FILE* fpout = fopen(outpath, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line"></span><br><span class="line">    getBmpWidthHeightStridePixChpix(fpin);</span><br><span class="line">    saveChZIP(fpin, fpout);</span><br><span class="line"></span><br><span class="line">    fclose(fpin);</span><br><span class="line">    fclose(fpout);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(g_linepix), <span class="built_in">free</span>(g_chpix), <span class="built_in">free</span>(g_chpixZIP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小故事（2）</title>
      <link href="2020/10/14/%E5%B0%8F%E6%95%85%E4%BA%8B%EF%BC%882%EF%BC%89/"/>
      <url>2020/10/14/%E5%B0%8F%E6%95%85%E4%BA%8B%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>昨天我看到群里一个高等数学考试用泰勒展开做极限题目的二货了</p><p>我问他：“你没有什么理想吗？你现在最渴望的事情是什么？”</p><p>二货立马回复我：“刷掉所有数分题。”</p><p>真没想到高数都算不对的人还有这样的决心。</p><p>我问为什么这能成为现阶段最渴望的事情，他反问“你难道就没有遇到过考试出不能洛的极限，全场都不会，你却会的情况吗？”</p><p>好有道理我竟无法反驳。</p><p>这么能说会道的大学生，一定是一个不可多得的天才。</p><p>于是，我决定：屏蔽他。</p><p>这两年在各种高数群里潜水多了,看着各路大佬没日没夜的讨论,原本爱水群的我,也只能每次默默+1,然后被禁言。</p><p>无论是校内群,还是校外群,群里的大佬总是那么几个,久而久之,我发现一个大佬们残酷的共同点——</p><p>他们都不学高数。</p><p>不努力吗？一个个都是绩点4.9起步，随手就是几百上千题秒解。</p><p>没时间吗? 一个个群消息都是秒回</p><p>我问过其中一个大佬,问:你不想学习吗?</p><p>他说：废话，肯定想啊。</p><p>我问：为什么不学？没时间吗？</p><p>他叹气：不，没有必要。</p><p>他意味深长道：<strong>优秀的大学生都是不学高数的</strong>。</p><p>跟我聊天的这个大佬，本身就是北大青鸟的扛把子，竞赛金牌随手拿，培训班随手进，各个教育平台都是首席讲师，高数之余 , 还能去做物理竞赛 。</p><p>他先前谎报年龄，自费去参加CPhO比赛 , 并没有花父母的钱 , 靠着帮人当枪手几万块的工钱 , 刚刚够得上生活。</p><p>最开始半年 , 每月只能剩个个把块钱 , 身边的女朋友们也都跑光了 , 死咬着牙不跟家里人说 ，他拿辛苦比赛得的钱斗地主, 终于在几天后，转亏为盈 , 过上了现在无忧无虑的生活 .</p><p>他还从来没有放弃过追回他的女朋友们。</p><p>这样优秀的物竞大佬，恐怕时间都很宝贵，哪还用得着学高数呢 。</p><p>我还认识一个英语爷</p><p>只要百度单词就能搜到他的博客 , 博客里充满了一堆你见都没见过的词 , 一堆他觉得常见你却一辈子也用不上的语法。</p><p>English这个圈子，大多数人都只能苦苦挣扎 , 不为人知，能达到他这个程度的，基本上只要在群里发言 , 就能得到一堆求网盘链接，自带全体复读机功能。</p><p>然而这位英语爷却是一股清流</p><p>他最大的爱好就是和上文提到的那位北大青鸟的大佬在群里打情骂俏 , 业余时间还会教教我们这些菜鸡一些简单语法。</p><p>我问他：“你到底怎么保持一颗平常心的，考四六级这么简单的卷子，怎么能接着活得如此潇洒自在，不会干扰到你的内心？”</p><p>他笑，说：你小时候没写过作文啊？尤其是学校组织的那种征文？</p><p>我立刻懂了。</p><p><strong>即便是简单的东西，也可以用专业态度去应对，在讲解简单语法的同时，也能够提高自己。</strong></p><p>就好比小时候写那种歌颂体作文时，我们都有几套模版去对付，获得应试的分数保证自己不被家长、老师训斥后，依旧会在自己的笔记本写真正想写的小说。</p><p><strong>这种本真，不是每个人都能坚持的，尤其是在成为大佬后，是非常难得的。</strong></p><p>他在教授完那些简单语法后 , 仍然会关注一下自己经济学人最新一章的链接跑到哪了。</p><p>像他这样仿佛活成仙的男人 ,他知道他会用英语解决高数题，所以，他不着急。</p><p>我希望你明白，<strong>大学生的价值从来都是由自己体现，而非他学不学高数</strong>。</p><p>上周遇到高数老师，他说他认识的一些事业单位的男孩子，总会认为高数很重要，不学绩点上不去。</p><p>他跟我说“可当那位青鸟学子献上他的高数试卷，我哭了，洁白如初见，好似神迹，我给了他满分。”</p><p>人是不需要高数的。</p><p>我爱的高数，在与我相处时，我当然会宠着他哄着他，求他别让我挂科。</p><p>但是，<strong>若一个真想成为自己理想中的样子，仍是要不屈服于这个高数至死的庸俗时代，仍是要不妥协于这个高数横流的主流社会。</strong></p><p><strong>仍是要永远年轻，永远热泪盈眶。</strong></p><p><strong>仍是要时时刻刻对美好满怀期待，对未来充满渴望，对经典心怀敬畏。</strong></p><p>要记住啊，<strong>知世故而不世故，处江湖而远江湖，才是最善良的成熟。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 小故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小故事（1）</title>
      <link href="2020/10/14/%E5%B0%8F%E6%95%85%E4%BA%8B%EF%BC%881%EF%BC%89/"/>
      <url>2020/10/14/%E5%B0%8F%E6%95%85%E4%BA%8B%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一"><a class="markdownIt-Anchor" href="#一"></a> 一</h1><p>巫师的帐篷里</p><p>“所以你想知道些什么呢？我敬爱的顾客。”</p><p>“请告诉我，为什么这么多年过后他的灵魂为什么还是缠着我，为什么只有我看的见他，为什么他现在就坐在我的身旁！。”</p><p>···</p><p>“哼，我知道。这是一点心意，当年国王会见我的时候，赏赐了我无数的金银，到今天我还有的是，只要你有这个能耐。”</p><p>“哈哈，您误会了，我只是对您感到好奇，因为肩上的伤口还在滴血。”</p><p>“什么伤口，流血？我的盔甲经历了三次战争，我的宝剑曾经斩首过西部的恶狼，你知道的，当年可没少死人。”</p><p>“······，那我给您讲个故事。”</p><p>——从前有一只猴子，他有一个巨大的家族。而他生活的环境也是其他猴子不敢想象的，成片的森林，清澈的湖水，数不胜数的奇珍异果···他无忧无虑，活得很自在。突然有一天，族群分裂，正值壮年的他要和一位素不相识的猴子争夺领头的位置。打斗没有悬念，另一只猴子被他揍的哇哇大叫，可是突然间对方掏出了暗针，这打破了这场争夺战的规定——不许使用武器，由于事出突然，来不及反应，他的左腿被划伤了。大家叫骂着赶走了作弊者，一拥而上，关心他的伤势。</p><p>从此，另一只猴子被这个家族驱逐了出去，杳无音讯。而获胜的他以伤口为一种殊荣，因为这是第一次又猴子在争夺地位的战斗中负伤。开始的时候大家都来围观，赞许他，于是为了满足大家的好奇，他每到白天就装出一瘸一拐的样子，在最繁忙的树枝头逛街；晚上，待到月亮爬到正空，他小心的撕开一点自己的伤口，防止它愈合。</p><p>很快就没人对一个小小的伤口感兴趣了，日复一日的工作又压弯了猴子们的头。而那个获胜者开始逐渐沦为时间的废弃物，新一轮的竞选早就开始，他作为伤员没有资格参战，但是仍然被尊为评委，坐在观众席的首席。大家呐喊，尖叫，却没有人注意到那个最高的座椅被染成了血红色。很快新的领袖诞生了，这只猴子彻底被人抛在记忆的灰尘里。</p><p>······</p><p>“所以这只猴子最后死了是吗？”</p><p>···</p><p>“所以这和我又有什么关系？我找你来是听说你还有些法力，不是···”</p><p>···</p><p>骑士站了起来，又坐了下去。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 小故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora基本用法</title>
      <link href="2020/10/14/Typora%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>2020/10/14/Typora%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="typora基本用法总结"><a class="markdownIt-Anchor" href="#typora基本用法总结"></a> Typora基本用法总结</h1><p><mark>（1）标题</mark></p><h1 id="一级标题"><a class="markdownIt-Anchor" href="#一级标题"></a> 一级标题</h1><h2 id="二级标题"><a class="markdownIt-Anchor" href="#二级标题"></a> 二级标题</h2><h3 id="三级标题"><a class="markdownIt-Anchor" href="#三级标题"></a> 三级标题</h3><h4 id="四级标题"><a class="markdownIt-Anchor" href="#四级标题"></a> 四级标题</h4><h5 id="五级标题"><a class="markdownIt-Anchor" href="#五级标题"></a> 五级标题</h5><h6 id="六级标题"><a class="markdownIt-Anchor" href="#六级标题"></a> 六级标题</h6><p><mark>（2）字体</mark></p><p><strong>加粗</strong></p><p><em>倾斜</em></p><p><em><strong>倾斜加粗</strong></em></p><p><s>删除线</s></p><p><mark>高亮</mark></p><p>我是<sup>上标</sup></p><p>我是<sub>下标</sub></p><p><mark>（3）列表</mark></p><ul><li>一二三四五</li><li>（按一下回车自动添加，再按一下取消）<ul><li>上山打老虎（按一下tab）<ul><li>老虎没打到<ul><li>打到小松鼠</li></ul></li></ul></li></ul></li></ul><ol><li>一二三四五</li><li>上山打老虎</li><li>老虎没打到</li><li>打到小松鼠</li></ol><p><mark>（4）表格</mark></p><table><thead><tr><th>MON</th><th>TUE</th><th>WED</th><th>THU</th><th>FRI</th></tr></thead><tbody><tr><td>上山（换行请按shift+enter）</td><td></td><td></td><td></td><td></td></tr><tr><td>打老虎（选择行列请通过表格左上角自动修改）</td><td></td><td></td><td></td><td></td></tr></tbody></table><p><mark>（5）引用</mark></p><blockquote><p>一二三四五</p><p>(直接回车)</p><blockquote><p>上山打老虎（再输入&gt;)</p><blockquote><p>老虎不在家</p><blockquote><p>打到小松鼠</p></blockquote></blockquote></blockquote></blockquote><p><mark>（6）分割线</mark></p><hr /><p>（三个“-”就够了）</p><p><mark>（7）代码</mark></p><p><code>行内代码</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码块</span><br></pre></td></tr></table></figure><p><mark>(8)Latex语法</mark></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><mark>(9)插入图片</mark></p><p><img src="http://code.insorker.cn/wp-content/uploads/2020/10/20200328115431_3yGjT.jpeg.jpg" alt="" /></p><p>（右键更快）</p><p><mark>（10）插入链接</mark></p><p><a href="code.insorker.cn">我的博客</a></p><p>（右键更快）</p><hr /><p>更多用法请于  “文件”——“偏好设置“  中修改</p><p>主题修改可以通过修改外观中的 .css 文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFS——献给阿尔吉侬的花束</title>
      <link href="2020/10/14/%E7%AE%97%E6%B3%95%EF%BC%9ABFS/"/>
      <url>2020/10/14/%E7%AE%97%E6%B3%95%EF%BC%9ABFS/</url>
      
        <content type="html"><![CDATA[<h1 id="bfs献给阿尔吉侬的花束"><a class="markdownIt-Anchor" href="#bfs献给阿尔吉侬的花束"></a> BFS——献给阿尔吉侬的花束</h1><p>BFS 的思路很清晰，先遍历距离为 1 的点，然后是 2 ，然后是 3 。。。</p><p>如此下来，就是天边也能遍历到（嗯，嗯）；</p><p>再谈思想，可以用队列的思想，我的队首出列，并一定操作，再把队首连接的下一级节点压入队中，流畅，自然。</p><p>队列的方法可以用 STL库</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q[n];</span><br><span class="line">q.push(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(q.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; t = q.front();</span><br><span class="line">q.pop();</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">q.push(); <span class="comment">// or not</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以手写一个队列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p[N];</span><br><span class="line">p[tt ++ ] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (hh &lt;= tt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; t = p[hh ++ ];</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">q[ ++ tt] = ...;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是很明晰呢？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划——埋葬故国武士的灵魂</title>
      <link href="2020/10/13/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>2020/10/13/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划埋葬故国武士的灵魂"><a class="markdownIt-Anchor" href="#动态规划埋葬故国武士的灵魂"></a> 动态规划——埋葬故国武士的灵魂</h1><h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>这是百度百科给出的动态规划的基本概念：</p><blockquote><p>如果一类活动过程可以分为若干个互相联系的阶段，在每一个阶段都需作出决策（采取措施），一个阶段的决策确定以后，常常影响到下一个阶段的决策，从而就完全确定了一个过程的活动路线，则称它为多阶段决策问题。</p><p>各个阶段的决策构成一个决策序列，称为一个策略。每一个阶段都有若干个决策可供选择，因而就有许多策略供我们选取，对应于一个策略可以确定活动的效果，这个效果可以用数量来确定。策略不同，效果也不同，多阶段决策问题，就是要在可以选择的那些策略中间，选取一个最优策略，使在预定的标准下达到最好的效果。</p></blockquote><p>我看过一个非常生动的解释</p><blockquote><p>Insorker：如何向一个四岁小孩解释动态规划？</p><p>Carve：”1 + 1 + 1 + 1 + 1 + 1 + 1 + 1“等于几？</p><p>。。。（3秒后）</p><p>Insorker：8！</p><p>Carve：如果再加上1呢</p><p>Insorker：9！</p><p>Carve：你是如何算这么快的呢？</p><p>Insorker：前面的1已经算过了。</p><p>Carve：O(∩_∩)O</p><p>Insorker：我明白了，我是记住了之前的答案，而不是再算一遍，也就是说我用我的大脑记忆代替了计算的时间花费。</p></blockquote><p>那么我个人对动态规划的理解是：</p><p>通过把大问题拆分成一堆递进的小问题，依次求每个小问题的解，最后获得整体上的解。</p><p>或者换句话说，</p><blockquote><p>一个这样的迷宫，每走过一个格子加上格子上的数，只能向下或者向右前进，初始是0：</p><p>S 2 3 2</p><p>2 1 4 1</p><p>1 1 2 1</p><p>2 3 1 E</p><p>如何才能最终以最大的和，从 S 走到 E ？</p></blockquote><p>一种方法是我把所有路径都算一遍，就是2 + 3 + 2 + 1 + 1这种走法算一遍，2 + 3 + 4 + 2 + 1也算一遍，这样要算 20 遍数据。但是我们可以很清楚的看见2 + 3这个部分被算了两次，这显然是在浪费时间。虽然每次计算我们开出来的数组很小，但是时间复杂度是20，如果这个迷宫是10 * 10的迷宫，则复杂度上升到了252，如果是 n * n 呢？则时间复杂度会是（约为）<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow><mrow><mo stretchy="false">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo stretchy="false">!</mo><mo stretchy="false">(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo stretchy="false">!</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{n!}{(\frac{n}{2})!(\frac{n}{2})!}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4659079999999998em;vertical-align:-0.5857999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mclose mtight">)</span><span class="mclose mtight">!</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mclose mtight">)</span><span class="mclose mtight">!</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mclose mtight">!</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5857999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>（杨辉三角）。。。</p><p>所以我们肯定需要某种方法来减少时间上的复杂度，不用说肯定是利用空间啦(〝▼皿▼)</p><p>我们可以写出一个dp数组，保存我们走过的路的最优解，所以每个小问题就是：走到（x，y）的最优解是什么。同时我们也可以列出递推式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[x][y] = max(dp[x - <span class="number">1</span>][y], dp[x][y - <span class="number">1</span>]) + v;</span><br></pre></td></tr></table></figure><h2 id="背包问题"><a class="markdownIt-Anchor" href="#背包问题"></a> 背包问题</h2><h3 id="01背包问题"><a class="markdownIt-Anchor" href="#01背包问题"></a> 01背包问题</h3><blockquote><p><strong>题目</strong></p><p>有<strong>N</strong>件物品和一个容量是<strong>V</strong>的背包。</p><p>每件物品只能使用一次。</p><p>第<strong>i</strong>件物品体积是<strong>v<sub>i</sub></strong>，价值是<strong>w<sub>i</sub></strong>。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包的容量，且总价值最大。</p><p><strong>输出格式</strong></p><p>输出一个整数，表示最大价值。</p><p><strong>数据范围</strong></p><p>0 &lt; <em>N</em>, <em>V</em> ≤ 1000<br />0 &lt; <em>v<sub>i</sub></em>,  <em>w<sub>i</sub></em> ≤ 1000</p><p><strong>输入样例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;4 5</span><br><span class="line">1 2</span><br><span class="line">&gt;2 4</span><br><span class="line">3 4</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;8</span><br></pre></td></tr></table></figure></blockquote><p>二维数组的情况很好理解，我们用<code>dp[i][j]</code>来表示取到第<strong>i</strong>个物品时，总容量为<strong>j</strong>的最优解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> w, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;w, &amp;v);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt; <span class="number">0</span>; j -- )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; w)</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - w] + v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, dp[n][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是一维数组就非常令人费解。</p><p>首先为什么要变一维数组，很显然是为了省空间，那可以省空间吗？</p><p>答案是肯定的。我们可以发现<code>dp[1][j]</code>在循环一次后就再也没有用到，这是为什么呢？</p><p>这是从定义出发导致的失误，每次我们算出来的结果，都是前<strong>i</strong>个物品在总量为<strong>j</strong>的情况下的最优解，但是我们并不需要记录这个最优解，所以可以优化为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> w, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; w &gt;&gt; v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j; j -- )</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w)</span><br><span class="line">                dp[j] = max(dp[j], dp[j - w] + v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>锵锵，是不是很神奇呢~~</p><p>原理很简单，我们只是把<strong>i</strong>省掉了，意思是放弃了记录所有前<strong>i</strong>个物品的最优解，转而只保存第<strong>i</strong>个物品的最优解。换句话说，就是现在记录的<code>dp[j]</code>其实就是<code>dp[i][j]</code>，只是其他的**“i”**我们不管了 哼，哼(▼へ▼メ)。</p><h2 id="未完待续"><a class="markdownIt-Anchor" href="#未完待续"></a> 未完待续</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心——古神的盛宴</title>
      <link href="2020/10/11/%E7%AE%97%E6%B3%95%EF%BC%9A%E8%B4%AA%E5%BF%83/"/>
      <url>2020/10/11/%E7%AE%97%E6%B3%95%EF%BC%9A%E8%B4%AA%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="贪心古神的盛宴"><a class="markdownIt-Anchor" href="#贪心古神的盛宴"></a> 贪心——古神的盛宴</h1><h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>这是我觉得最有意思的算法。</p><p>题目很多变，而且对数学有一定要求。</p><p>如果我做一个贪心的人怎么样呢，不断地追求眼前的最优解，不断追求既得的利益，一定会成为一个大富翁吧。</p><p>现实是否定的，因为我们要考虑到未来的因素。</p><p>能否从纷繁复杂的可能中找到一个有用的解，需要去理性的证明，而不是感性的冲动。</p><p>有机会遇到好的题目我会放到博客里的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在最前面</title>
      <link href="2020/10/11/%E5%86%99%E5%9C%A8%E6%9C%80%E5%89%8D%E9%9D%A2/"/>
      <url>2020/10/11/%E5%86%99%E5%9C%A8%E6%9C%80%E5%89%8D%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="一二三四五六七"><a class="markdownIt-Anchor" href="#一二三四五六七"></a> 一二三四五六七</h1><p>本来已经有一个博客了，但是那边建站用的是WordPress，个人感觉有点过于庸华。</p><p>本着简约至上的理念，再加上最近才知道github可以托管静态页面，就用Hexo建了一个小网站。</p><p>当然，Hexo支持markdown语法，这也让我有种很温馨的感觉。</p><p>就好像森林里的小木屋，大冬天点上一炉篝火，盯着火苗发呆。</p><p>所以大概或许说不定以后会经常在这里更新，写写题解，做做笔记，说说话。</p><p>但是以后还是会从这里搬走······</p><p>搬到哪里去呢······</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404</title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类(^_−)☆</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>slides</title>
      <link href="slides/index.html"/>
      <url>slides/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签o(´^｀)o</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
